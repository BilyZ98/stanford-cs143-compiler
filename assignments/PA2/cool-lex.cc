#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 65
#define YY_END_OF_BUFFER 66
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[610] =
    {   0,
        0,    0,   18,   18,    3,    3,    6,    6,   66,   64,
       43,   44,   10,   59,   60,   50,   48,   63,   49,   54,
       51,   40,   61,   55,   52,   53,   62,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   57,
       58,   56,   18,   18,   13,   11,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   64,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,    3,    3,    4,    3,

        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    6,    6,    7,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,   43,
        1,    8,    5,   40,   45,   46,    9,   41,   41,   41,
       41,   41,   23,   24,   25,   41,   41,   41,   41,   36,

       41,   41,   41,   42,   42,   42,   42,   42,   42,   23,
       24,   25,   42,   42,   42,   42,   42,   36,   42,   42,
       42,   42,   18,   18,    8,   18,   18,   18,    9,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   20,   12,   15,   17,
       14,   16,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,    3,    3,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    6,    6,    1,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,   41,   41,   41,   41,
       41,   28,   41,   35,   37,   41,   41,   41,   42,   42,
       42,   42,   42,   42,   42,   28,   42,   35,   37,   42,
       42,   42,   42,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,   33,   41,   22,   34,   41,   29,
       30,   31,   41,   33,   42,   22,   34,   42,   42,   42,
       29,   30,   31,   39,   42,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   21,   41,
       32,   21,   38,   42,   42,   32,   18,   18,   18,   18,
       18,   18,   18,   18,    3,    3,    3,    3,    3,    3,
        3,    3,    6,    6,    6,    6,    6,    6,    6,    6,
       41,   42,   27,   18,   18,   18,    3,    3,    3,    6,
        6,    6,   41,   42,   18,   18,    3,    3,    6,    6,

       26,   26,   18,   18,    3,    3,    6,    6,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,   20,   21,   22,   23,   22,   24,   25,
       22,   26,   27,   22,   22,   28,   22,   29,   30,   31,
       22,   32,   33,   34,   35,   22,   36,   22,   22,   22,
        1,   37,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   45,   45,   48,   45,   49,
       50,   51,   45,   52,   53,   54,   55,   56,   57,   45,
       45,   45,   58,    1,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    5,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1
    } ;

static const flex_int16_t yy_base[622] =
    {   0,
        0,    0,   60,    0,  120,    0,  180,    0,  612, 3366,
      580, 3366, 3366,  574, 3366,  563, 3366, 3366,  550, 3366,
     3366,  228, 3366, 3366,  233,  519, 3366,    0,  224,  216,
      219,  229,  231,  232,  223,  220,  231,  233,    0,  232,
      255,  263,  260,  262,  271,  243,  246,  265,  272, 3366,
     3366, 3366,    0,  531, 3366, 3366,    0,    0,  522,    0,
        0,    0,    0,    0,  280,    0,    0,  289,  506,    0,
      321,  381,  314,  322,  327,  382,  383,  417,  407,  423,
      438,  414,  486,  546,  479,  487,  547,  549,  559,  492,
      580,  590,  605,    0,    0,    0,    0,  519,  504,    0,

      479,    0,    0,    0,    0,    0,  302,    0,    0,  336,
      464,    0,  653,  713,  646,  502,  659,  714,  715,  661,
      593,  748,  749,  797,  857,  790,  798,  858,  860,  897,
      803,  832,  898,  913,    0,    0,    0,    0,  480, 3366,
      474,    0,  474,    0,    0,    0,    0,    0,  306,    0,
        0,  341,  457,    0,  961, 1021,  954,  962,  967, 1022,
     1023,  910, 1046, 1056, 1062, 1110, 1170, 1103, 1111, 1171,
     1173, 1210, 1116, 1211, 1216, 1226,    0,    0,    0,  470,
     3366, 3366, 3366,  311, 3366, 3366, 3366,    0,  311,  226,
      312,  339,    0,    0,  331,  340,  355,  327,  361,    0,

      384,  400,  389,    0,  414,  431,  420,  439,  451,    0,
        0,  463,  394,  456,  489,  480,  488,    0,  563,  500,
      580,  590,    0,  446,    0,  359,    0,    0,    0, 1145,
     1242, 1174, 1245, 1248, 1258, 1261, 1273, 1283, 1286, 1287,
     1299, 1311, 1321, 1324, 1334, 3366, 3366, 3366, 3366, 3366,
     3366, 3366, 1336, 1337, 1358, 1359, 1372, 1374, 1375, 1380,
     1403, 1388, 1404, 1409, 1425, 1426, 1442, 1447, 1448, 1450,
     1472,    0,  421, 3366,  405,    0,    0,    0, 1473, 1485,
     1486, 1489, 1487, 1488, 1502, 1518, 1519, 1524, 1540, 1541,
     1557, 1562, 1563, 1586, 1587, 1588, 1601, 1609, 1611, 1617,

     1625, 1630, 1640, 1642, 1646, 1654, 1671, 1675, 1685, 1687,
     1697, 1699, 1721,    0,  406,    0,    0,  461,    0,    0,
        0, 1711, 1723, 1725, 1742, 1744, 1746, 1758, 1761, 1777,
     1780, 1793, 1799, 1796, 1815, 1818, 1828, 1830, 1831, 1852,
     1853, 1866, 1868, 1869, 1874, 1897, 1882, 1898, 1903, 1919,
     1920, 1936, 1941, 1942, 1944, 1966,  535,  587,  547,  604,
      560,    0,  615,    0,    0,  628,  629,  647,  653,  648,
      659,  611,  673,  667,  318,    0,  689,    0,    0,  699,
      717,  673,  720, 1976, 1988, 2001, 1989, 2011, 2017, 2027,
     2025, 2040, 2041, 2042, 2046, 2071, 2065, 2081, 2094, 2095,

     2116, 2110, 2118, 2140, 2124, 2126, 2141, 2154, 2157, 2156,
     2173, 2178, 2186, 2199, 2209, 2207, 2211, 2215, 2228, 2230,
     2232, 2244, 2258, 2256, 2272, 2282, 2286, 2303, 2305, 2301,
     2317, 2315, 2331, 2336, 2348, 2350, 2352, 2362, 2374, 2387,
     2393, 2412, 2364, 2417, 2418, 2422, 2441, 2443, 2446, 2460,
     2462, 2481, 2491, 2465, 2507, 2495, 2505, 2520, 2519, 2521,
     2533, 2535, 2549, 2554,    0,  726,    0,    0,  728,    0,
        0,    0,  694,    0,  749,    0,    0,  743,  752,  311,
        0,    0,    0,    0,  757, 2557, 2570, 2573, 2578, 2583,
     2586, 2599, 2609, 2612, 2611, 2625, 2624, 2628, 2641, 2647,

     2649, 2653, 2666, 2670, 2672, 2682, 2687, 2695, 2701, 2703,
     2718, 2716, 2717, 2732, 2748, 2740, 2753, 2754, 2756, 2779,
     2777, 2787, 2789, 2791, 2792, 2793, 2821, 2815, 2823, 2827,
     2829, 2846, 2831, 2844, 2852, 2860, 2865, 2868, 2881, 2884,
     2894, 2896, 2906, 2910, 2918, 2922, 2934, 2935,    0,  763,
        0,    0,    0,  793,  292,    0, 2947, 2960, 2963, 2964,
     2976, 2989, 2992, 2993, 3005, 3018, 3021, 3022, 3034, 3047,
     3050, 3051, 3063, 3076, 3079, 3080, 3092, 3105, 3108, 3109,
      787,  796,    0, 3121, 3133, 3137, 3143, 3145, 3162, 3168,
     3184, 3167,  799,  811, 3192, 3196, 3200, 3213, 3226, 3229,

        0,    0, 3230, 3242, 3252, 3255, 3265, 3267, 3366,  301,
      295, 3315, 3320, 3325, 3330, 3335, 3340, 3345, 3350, 3355,
     3360
    } ;

static const flex_int16_t yy_def[622] =
    {   0,
      609,    1,  609,    3,  609,    5,  609,    7,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  609,
      609,  609,  612,  612,  609,  609,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      613,  613,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  614,  615,  615,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  612,  612,  612,  616,  616,  609,  616,

      609,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  617,  617,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  618,  618,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  616,  616,  616,  619,  619,  609,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  620,  620,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  621,  621,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  619,  619,  619,  609,
      609,  609,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  612,  612,  612,  612,  612,  612,  612,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  609,  609,  609,  609,  609,
      609,  609,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  616,  616,  609,  616,  616,  616,  616,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  619,  619,  619,  619,  619,  619,  619,
      619,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  610,  610,
      610,  611,  611,  611,  611,  611,   72,   72,   72,   84,
       84,   84,   84,   84,  114,  114,  114,  125,  125,  125,
      125,  125,  156,  156,  156,  167,  167,  167,  167,  167,
      610,  611,  611,   72,   84,   84,  114,  125,  125,  156,
      167,  167,  610,  611,   72,   84,  114,  125,  156,  167,

      610,  611,   72,   84,  114,  125,  156,  167,    0,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609
    } ;

static const flex_int16_t yy_nxt[3427] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   22,   23,   24,   25,   26,   10,   27,
       28,   28,   29,   30,   31,   28,   32,   33,   34,   35,
       36,   28,   28,   37,   28,   38,   10,   10,   39,   39,
       40,   39,   41,   42,   39,   39,   43,   44,   45,   46,
       47,   39,   39,   48,   39,   39,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   65,   66,   67,   68,   69,   53,   70,
       71,   71,   72,   73,   74,   71,   75,   76,   77,   78,
       79,   71,   71,   80,   71,   81,   82,   53,   83,   83,

       84,   83,   85,   86,   83,   83,   87,   88,   89,   90,
       91,   83,   83,   92,   83,   83,   93,   94,   95,   96,
       97,   98,   12,   97,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  107,  108,  109,  110,  111,   97,  112,
      113,  113,  114,  115,  116,  113,  117,  118,  119,  120,
      121,  113,  113,  122,  113,  123,   97,   97,  124,  124,
      125,  124,  126,  127,  124,  124,  128,  129,  130,  131,
      132,  124,  124,  133,  124,  124,  134,  135,  136,  137,
      138,  139,  140,  138,  141,  142,  143,  144,  145,  146,
      147,  148,  149,  149,  150,  151,  152,  153,  138,  154,

      155,  155,  156,  157,  158,  155,  159,  160,  161,  162,
      163,  155,  155,  164,  155,  165,  138,  138,  166,  166,
      167,  166,  168,  169,  166,  166,  170,  171,  172,  173,
      174,  166,  166,  175,  166,  166,  176,  177,  178,  179,
      184,  184,  185,  191,  189,  193,  358,  200,  192,  201,
      186,  190,  205,  194,  196,  198,  202,  195,  203,  206,
      197,  199,  189,  191,  358,  193,  200,  218,  192,  201,
      205,  190,  194,  196,  198,  219,  202,  195,  203,  206,
      197,  199,  207,  209,  211,  214,  218,  208,  212,  210,
      220,  215,  226,  226,  216,  219,  221,  222,  227,  204,

      217,  209,  207,  211,  214,  188,  228,  208,  212,  210,
      220,  215,  213,  216,  275,  275,  221,  222,  318,  318,
      217,  223,  223,  184,  184,  223,  223,  223,  223,  223,
      223,  223,  223,  583,  230,  223,  223,  223,  223,  223,
      223,  233,  230,  357,  359,  276,  234,  230,  235,  230,
      319,  236,  230,  277,  230,  237,  361,  555,  320,  360,
      230,  233,  364,  357,  359,  230,  234,  480,  235,  230,
      236,  226,  226,  362,  230,  237,  361,  360,  223,  223,
      223,  223,  223,  364,  363,  223,  223,  223,  223,  223,
      223,  223,  223,  362,  365,  223,  223,  223,  223,  223,

      223,  231,  230,  230,  363,  238,  240,  315,  232,  230,
      230,  239,  241,  366,  365,  368,  247,  275,  275,  231,
      230,  230,  273,  367,  238,  240,  248,  230,  232,  230,
      230,  239,  241,  366,  230,  368,  243,  230,  223,  223,
      223,  242,  367,  230,  230,  230,  369,  224,  244,  375,
      230,  370,  371,  249,  230,  230,  243,  250,  230,  372,
      242,  230,  251,  245,  230,  230,  369,  252,  244,  370,
      230,  180,  371,  318,  318,  321,  230,  372,  373,  317,
      316,  315,  278,  245,  274,  230,  223,  223,  374,  376,
      223,  223,  223,  223,  223,  223,  223,  223,  373,  253,

      223,  223,  223,  223,  223,  223,  256,  258,  374,  376,
      181,  257,  253,  259,  253,  378,  267,  253,  377,  253,
      273,  379,  279,  381,  229,  258,  256,  225,  284,  279,
      253,  257,  224,  259,  253,  267,  378,  187,  377,  253,
      279,  379,  381,  223,  223,  223,  223,  223,  284,  279,
      223,  223,  223,  223,  223,  223,  223,  223,  465,  183,
      223,  223,  223,  223,  223,  223,  254,  253,  182,  253,
      467,  260,  263,  255,  253,  261,  253,  465,  264,  253,
      181,  180,  265,  469,  254,  253,  253,  253,  266,  467,
      260,  263,  380,  255,  253,  261,  253,  253,  264,  262,

      253,  265,  469,  223,  223,  223,  253,  253,  266,  268,
      253,  609,  380,  279,  382,  269,  383,  253,  253,  466,
      279,  270,  292,  609,  609,  253,  468,  253,  253,  268,
      271,  279,  253,  477,  382,  269,  383,  253,  609,  466,
      279,  270,  292,  253,  468,  470,  609,  609,  609,  609,
      271,  477,  253,  272,  272,  471,  272,  472,  272,  609,
      272,  272,  272,  272,  272,  470,  279,  272,  272,  272,
      272,  272,  272,  282,  473,  471,  474,  472,  283,  279,
      475,  279,  476,  285,  279,  291,  279,  286,  279,  272,
      479,  609,  609,  282,  473,  474,  484,  279,  283,  279,

      475,  476,  285,  609,  291,  478,  279,  286,  279,  479,
      272,  272,  272,  272,  272,  484,  272,  551,  272,  481,
      272,  272,  272,  272,  272,  478,  482,  272,  272,  272,
      272,  272,  272,  280,  279,  279,  551,  287,  289,  481,
      281,  279,  279,  288,  290,  483,  482,  485,  609,  272,
      609,  280,  279,  279,  609,  609,  287,  289,  549,  550,
      281,  279,  279,  288,  290,  483,  553,  485,  279,  279,
      272,  272,  272,  293,  294,  279,  279,  609,  549,  550,
      556,  552,  609,  554,  609,  553,  279,  279,  609,  581,
      609,  609,  609,  293,  294,  279,  279,  272,  272,  556,

      272,  552,  272,  554,  272,  272,  272,  272,  272,  581,
      295,  272,  272,  272,  272,  272,  272,  298,  300,  582,
      593,  609,  299,  295,  301,  295,  609,  309,  295,  594,
      295,  601,  609,  272,  609,  609,  300,  298,  609,  582,
      593,  295,  299,  602,  301,  295,  309,  609,  609,  594,
      295,  601,  295,  609,  272,  272,  272,  272,  272,  295,
      272,  310,  272,  602,  272,  272,  272,  272,  272,  609,
      295,  272,  272,  272,  272,  272,  272,  296,  295,  295,
      295,  310,  302,  305,  297,  295,  303,  295,  609,  306,
      609,  609,  609,  272,  609,  296,  295,  609,  295,  609,

      609,  302,  305,  609,  297,  295,  303,  295,  609,  306,
      304,  609,  609,  609,  272,  272,  272,  295,  295,  609,
      307,  609,  609,  311,  295,  295,  308,  609,  609,  312,
      322,  609,  609,  295,  334,  295,  295,  322,  313,  307,
      295,  609,  609,  311,  295,  295,  308,  609,  322,  312,
      609,  295,  609,  334,  609,  609,  609,  322,  313,  609,
      295,  314,  314,  609,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  609,  322,  314,  314,  314,  314,  314,
      314,  325,  322,  609,  609,  609,  326,  322,  327,  322,
      609,  328,  322,  609,  322,  329,  609,  314,  609,  609,

      322,  325,  609,  609,  609,  322,  326,  609,  327,  322,
      328,  609,  609,  609,  322,  329,  609,  609,  314,  314,
      314,  314,  314,  609,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  609,  609,  314,  314,  314,  314,  314,
      314,  323,  322,  322,  609,  330,  332,  609,  324,  322,
      322,  331,  333,  609,  609,  609,  609,  314,  609,  323,
      322,  322,  609,  609,  330,  332,  322,  609,  324,  322,
      322,  331,  333,  322,  609,  335,  322,  609,  314,  314,
      314,  336,  322,  322,  322,  609,  609,  337,  609,  322,
      609,  609,  609,  322,  322,  335,  609,  609,  609,  609,

      322,  336,  609,  322,  609,  609,  609,  337,  609,  322,
      314,  314,  609,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  609,  338,  314,  314,  314,  314,  314,  314,
      341,  343,  609,  609,  609,  342,  338,  344,  338,  609,
      352,  338,  609,  338,  609,  609,  314,  609,  609,  343,
      341,  609,  609,  609,  338,  342,  609,  344,  338,  352,
      609,  609,  609,  338,  609,  230,  609,  314,  314,  314,
      314,  314,  230,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  609,  230,  314,  314,  314,  314,  314,  314,
      339,  338,  230,  338,  385,  345,  348,  340,  338,  346,

      338,  230,  349,  609,  609,  609,  314,  609,  339,  338,
      609,  338,  385,  609,  345,  348,  609,  340,  338,  346,
      338,  230,  349,  347,  609,  609,  609,  314,  314,  314,
      338,  338,  609,  350,  609,  609,  338,  338,  338,  351,
      353,  354,  609,  338,  609,  609,  338,  355,  338,  338,
      609,  356,  350,  338,  338,  609,  609,  338,  338,  351,
      353,  354,  230,  338,  338,  230,  609,  355,  387,  230,
      609,  356,  230,  338,  384,  230,  609,  386,  230,  609,
      230,  230,  609,  230,  609,  230,  387,  609,  230,  230,
      609,  609,  230,  230,  384,  230,  230,  386,  388,  230,

      230,  609,  609,  230,  609,  230,  230,  230,  230,  609,
      230,  230,  609,  230,  230,  390,  389,  609,  388,  230,
      230,  230,  391,  609,  230,  230,  230,  609,  609,  609,
      230,  230,  392,  230,  230,  390,  389,  230,  230,  609,
      609,  230,  609,  391,  230,  609,  230,  394,  230,  230,
      393,  230,  392,  609,  230,  609,  253,  253,  230,  230,
      395,  230,  230,  253,  253,  609,  394,  609,  230,  396,
      393,  230,  230,  609,  253,  253,  609,  609,  397,  253,
      395,  230,  609,  253,  253,  253,  253,  609,  609,  396,
      609,  398,  399,  609,  253,  253,  397,  253,  609,  253,

      253,  400,  253,  609,  609,  253,  253,  253,  253,  609,
      399,  398,  253,  253,  609,  253,  609,  609,  253,  253,
      609,  400,  253,  253,  253,  609,  253,  253,  401,  253,
      253,  253,  609,  609,  609,  253,  253,  403,  404,  609,
      609,  253,  253,  402,  609,  253,  253,  253,  401,  609,
      253,  253,  253,  253,  609,  609,  253,  403,  404,  406,
      405,  609,  253,  253,  253,  609,  609,  253,  253,  253,
      253,  408,  253,  253,  253,  253,  407,  253,  609,  406,
      253,  405,  609,  609,  409,  253,  253,  609,  253,  253,
      408,  609,  253,  279,  253,  253,  407,  253,  410,  253,

      279,  609,  609,  609,  409,  279,  412,  414,  279,  279,
      253,  279,  279,  279,  279,  279,  279,  411,  410,  253,
      279,  413,  279,  279,  412,  414,  279,  279,  609,  279,
      609,  609,  279,  279,  279,  279,  279,  411,  279,  279,
      279,  413,  609,  415,  279,  279,  279,  609,  609,  279,
      609,  279,  416,  417,  609,  609,  279,  279,  609,  609,
      279,  279,  279,  415,  609,  279,  279,  279,  279,  609,
      609,  279,  416,  417,  419,  418,  609,  279,  279,  279,
      609,  609,  279,  279,  279,  609,  421,  279,  279,  279,
      279,  420,  609,  609,  419,  279,  418,  609,  609,  609,

      279,  279,  609,  609,  279,  421,  279,  295,  295,  279,
      279,  420,  422,  279,  295,  295,  609,  609,  609,  609,
      423,  424,  609,  609,  279,  295,  295,  609,  295,  295,
      609,  426,  422,  279,  295,  295,  295,  295,  295,  424,
      423,  425,  609,  609,  427,  295,  609,  295,  295,  426,
      295,  609,  295,  609,  609,  295,  295,  295,  295,  609,
      295,  425,  295,  295,  427,  428,  295,  295,  295,  295,
      609,  609,  295,  295,  295,  609,  609,  295,  295,  430,
      295,  295,  609,  431,  295,  428,  609,  295,  609,  295,
      609,  295,  295,  295,  609,  295,  609,  429,  295,  430,

      609,  295,  295,  431,  609,  295,  432,  295,  433,  295,
      609,  609,  295,  295,  295,  609,  434,  295,  295,  295,
      435,  609,  295,  295,  295,  295,  295,  432,  433,  609,
      609,  322,  295,  436,  295,  295,  434,  295,  322,  435,
      609,  295,  609,  322,  295,  439,  295,  437,  295,  322,
      322,  609,  322,  436,  609,  438,  609,  609,  322,  295,
      609,  322,  322,  439,  441,  609,  322,  437,  295,  322,
      322,  322,  322,  322,  440,  438,  609,  609,  322,  609,
      322,  322,  441,  609,  322,  322,  442,  609,  322,  322,
      609,  322,  609,  322,  440,  609,  322,  322,  609,  322,

      322,  609,  609,  609,  322,  322,  442,  322,  322,  444,
      443,  609,  609,  322,  609,  322,  322,  609,  322,  322,
      322,  609,  609,  322,  322,  609,  322,  322,  445,  444,
      443,  322,  446,  609,  322,  322,  609,  322,  322,  609,
      322,  448,  322,  322,  447,  322,  322,  609,  322,  445,
      338,  338,  446,  322,  449,  322,  322,  338,  338,  609,
      448,  609,  322,  450,  447,  322,  322,  609,  338,  338,
      609,  609,  451,  338,  449,  322,  609,  338,  338,  338,
      338,  609,  609,  450,  609,  452,  453,  609,  338,  338,
      451,  338,  609,  338,  338,  454,  338,  609,  609,  338,

      338,  338,  338,  609,  453,  452,  338,  338,  609,  338,
      609,  609,  338,  338,  609,  454,  338,  338,  338,  609,
      338,  338,  455,  338,  338,  338,  609,  609,  609,  338,
      338,  457,  458,  609,  609,  338,  338,  456,  609,  338,
      338,  338,  455,  609,  338,  338,  338,  338,  609,  609,
      338,  457,  458,  460,  459,  609,  338,  338,  338,  609,
      609,  338,  338,  338,  338,  462,  338,  338,  338,  338,
      461,  338,  609,  460,  338,  459,  609,  609,  463,  338,
      338,  609,  338,  338,  462,  609,  338,  609,  338,  338,
      461,  338,  464,  338,  609,  609,  230,  609,  463,  486,

      609,  609,  609,  230,  338,  609,  609,  609,  230,  230,
      609,  489,  464,  338,  230,  230,  230,  609,  486,  609,
      487,  230,  609,  230,  488,  609,  230,  230,  230,  489,
      609,  230,  609,  609,  490,  230,  230,  230,  230,  230,
      487,  609,  609,  488,  230,  230,  609,  230,  230,  230,
      609,  609,  230,  490,  230,  230,  609,  491,  230,  609,
      230,  230,  230,  230,  230,  230,  230,  230,  492,  230,
      493,  609,  230,  494,  230,  609,  609,  491,  230,  230,
      230,  609,  609,  609,  230,  253,  609,  230,  492,  230,
      493,  253,  253,  494,  495,  609,  609,  496,  253,  609,

      609,  253,  609,  253,  497,  609,  609,  609,  253,  253,
      609,  609,  253,  495,  253,  253,  498,  496,  253,  253,
      609,  253,  253,  497,  609,  609,  609,  499,  253,  609,
      253,  609,  253,  253,  498,  609,  253,  253,  253,  500,
      609,  253,  253,  253,  253,  253,  253,  499,  253,  609,
      609,  253,  609,  253,  253,  609,  253,  253,  500,  501,
      253,  253,  253,  253,  253,  253,  609,  253,  503,  609,
      502,  253,  609,  253,  253,  609,  253,  253,  253,  253,
      505,  253,  504,  506,  253,  609,  609,  253,  503,  609,
      502,  609,  253,  279,  253,  253,  507,  609,  279,  505,

      279,  253,  504,  506,  253,  279,  279,  609,  609,  509,
      508,  279,  609,  279,  609,  507,  279,  609,  609,  279,
      279,  510,  609,  609,  279,  279,  279,  279,  509,  279,
      508,  279,  511,  279,  279,  279,  279,  279,  279,  510,
      609,  512,  279,  609,  609,  279,  279,  279,  279,  279,
      279,  511,  279,  279,  279,  279,  279,  513,  279,  279,
      514,  512,  279,  609,  279,  609,  279,  609,  279,  609,
      279,  515,  609,  609,  609,  279,  295,  513,  295,  279,
      514,  516,  279,  295,  609,  295,  609,  609,  517,  609,
      609,  515,  295,  609,  295,  518,  295,  609,  609,  295,

      516,  609,  295,  295,  519,  295,  295,  609,  517,  295,
      295,  609,  609,  295,  518,  609,  609,  609,  520,  295,
      295,  295,  519,  295,  295,  295,  521,  609,  295,  295,
      295,  609,  295,  295,  609,  295,  609,  295,  520,  295,
      609,  295,  295,  295,  295,  521,  609,  523,  295,  609,
      295,  295,  295,  295,  522,  295,  295,  609,  295,  609,
      609,  609,  295,  524,  295,  609,  609,  523,  295,  295,
      295,  609,  295,  526,  295,  295,  525,  295,  295,  527,
      609,  609,  322,  524,  322,  528,  295,  609,  295,  322,
      295,  322,  526,  609,  322,  295,  525,  295,  609,  527,

      322,  322,  322,  609,  528,  609,  529,  322,  609,  322,
      530,  322,  322,  322,  322,  531,  609,  609,  609,  609,
      322,  322,  609,  609,  609,  322,  529,  609,  609,  530,
      609,  322,  322,  531,  322,  532,  609,  322,  322,  322,
      322,  609,  322,  609,  322,  322,  609,  533,  609,  322,
      322,  609,  609,  609,  532,  322,  322,  609,  609,  322,
      322,  322,  609,  322,  322,  322,  322,  533,  534,  322,
      322,  535,  609,  536,  609,  609,  609,  609,  609,  322,
      338,  322,  338,  537,  322,  338,  609,  338,  534,  338,
      322,  535,  338,  536,  538,  609,  609,  541,  338,  609,

      338,  338,  537,  338,  539,  609,  609,  338,  338,  338,
      609,  338,  338,  540,  538,  338,  609,  541,  338,  338,
      609,  609,  338,  539,  609,  338,  609,  338,  338,  338,
      542,  540,  338,  338,  338,  609,  609,  609,  338,  338,
      338,  338,  338,  338,  543,  338,  338,  338,  338,  542,
      544,  609,  338,  338,  338,  338,  609,  338,  338,  338,
      545,  609,  338,  546,  609,  609,  338,  338,  338,  338,
      544,  338,  547,  338,  338,  609,  338,  230,  609,  609,
      545,  548,  338,  546,  230,  609,  609,  338,  609,  609,
      230,  547,  338,  230,  609,  230,  338,  230,  230,  609,

      230,  548,  557,  230,  230,  230,  230,  609,  230,  609,
      230,  230,  609,  230,  558,  609,  230,  230,  609,  230,
      230,  230,  557,  609,  230,  230,  230,  609,  609,  230,
      230,  253,  230,  230,  558,  559,  230,  230,  253,  230,
      609,  609,  609,  609,  253,  253,  230,  230,  253,  253,
      230,  253,  253,  609,  559,  253,  230,  560,  253,  230,
      609,  253,  253,  253,  561,  609,  253,  253,  253,  253,
      609,  253,  253,  253,  253,  253,  253,  560,  562,  253,
      253,  609,  609,  561,  609,  253,  253,  253,  253,  609,
      253,  253,  253,  253,  253,  563,  253,  253,  562,  253,

      253,  609,  253,  609,  253,  564,  609,  279,  253,  253,
      253,  609,  609,  253,  279,  279,  609,  253,  609,  253,
      253,  279,  279,  279,  564,  279,  609,  565,  279,  253,
      279,  609,  609,  279,  279,  609,  279,  279,  279,  279,
      609,  279,  279,  279,  279,  279,  609,  565,  279,  566,
      279,  609,  279,  609,  279,  279,  279,  609,  609,  279,
      295,  609,  609,  279,  279,  279,  609,  295,  279,  566,
      279,  567,  609,  295,  295,  279,  295,  609,  295,  279,
      295,  295,  609,  295,  609,  568,  279,  295,  609,  609,
      567,  295,  295,  609,  295,  279,  609,  295,  609,  295,

      295,  295,  569,  295,  295,  568,  295,  295,  570,  295,
      609,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  569,  609,  609,  295,  295,  295,  295,  570,  295,
      295,  295,  609,  571,  295,  322,  295,  609,  295,  295,
      295,  295,  322,  322,  572,  609,  609,  322,  295,  322,
      322,  322,  609,  322,  322,  573,  322,  609,  322,  295,
      609,  322,  322,  572,  322,  322,  322,  322,  295,  322,
      322,  322,  322,  322,  322,  573,  322,  574,  322,  322,
      322,  609,  322,  575,  322,  338,  609,  322,  338,  609,
      322,  322,  338,  322,  609,  338,  609,  574,  322,  322,

      576,  338,  575,  338,  338,  609,  338,  322,  338,  609,
      609,  338,  338,  609,  338,  338,  338,  577,  609,  338,
      576,  338,  338,  338,  609,  609,  338,  578,  338,  609,
      338,  338,  338,  338,  338,  609,  577,  338,  338,  609,
      609,  338,  338,  338,  338,  338,  609,  578,  338,  338,
      609,  609,  579,  338,  338,  338,  338,  338,  580,  609,
      338,  338,  338,  609,  609,  338,  609,  230,  609,  338,
      609,  609,  338,  338,  230,  609,  609,  580,  609,  609,
      230,  338,  338,  230,  253,  230,  584,  230,  609,  609,
      230,  253,  609,  609,  230,  609,  253,  609,  230,  609,

      609,  230,  253,  253,  609,  609,  584,  230,  609,  253,
      230,  253,  253,  253,  253,  585,  253,  609,  609,  253,
      253,  609,  609,  253,  609,  279,  609,  253,  609,  609,
      253,  253,  279,  586,  609,  585,  253,  609,  279,  253,
      253,  279,  295,  279,  587,  279,  609,  609,  279,  295,
      609,  609,  279,  609,  295,  609,  279,  609,  609,  279,
      295,  295,  609,  609,  587,  279,  609,  295,  279,  295,
      295,  295,  295,  588,  295,  609,  609,  295,  295,  609,
      609,  295,  609,  322,  609,  295,  609,  609,  295,  295,
      322,  589,  609,  588,  295,  609,  322,  295,  295,  322,

      338,  322,  590,  322,  609,  609,  322,  338,  609,  609,
      322,  609,  338,  609,  322,  609,  609,  322,  338,  338,
      609,  609,  590,  322,  609,  338,  322,  338,  338,  338,
      338,  591,  338,  609,  609,  338,  338,  609,  609,  338,
      609,  230,  609,  338,  609,  609,  338,  338,  230,  592,
      609,  591,  338,  253,  595,  338,  338,  253,  609,  230,
      253,  609,  609,  279,  253,  295,  596,  609,  230,  609,
      279,  253,  295,  609,  595,  253,  597,  609,  598,  609,
      253,  279,  295,  295,  253,  609,  596,  338,  322,  295,
      279,  609,  295,  609,  338,  322,  597,  609,  598,  609,

      295,  599,  609,  609,  338,  338,  322,  609,  609,  295,
      609,  338,  230,  609,  338,  322,  253,  600,  609,  230,
      279,  599,  338,  253,  603,  609,  609,  279,  604,  609,
      230,  338,  605,  295,  253,  609,  609,  600,  279,  230,
      295,  609,  609,  253,  603,  606,  322,  279,  604,  338,
      230,  295,  605,  322,  609,  609,  338,  230,  607,  609,
      295,  608,  253,  609,  322,  606,  609,  338,  230,  253,
      609,  609,  279,  322,  609,  295,  338,  230,  607,  279,
      253,  608,  295,  609,  609,  322,  609,  338,  609,  253,
      279,  609,  322,  295,  338,  609,  609,  609,  609,  279,

      609,  609,  295,  322,  609,  338,  609,  609,  609,  609,
      609,  609,  322,  609,  338,  223,  609,  609,  223,  223,
      230,  609,  609,  230,  230,  246,  246,  246,  246,  246,
      253,  609,  609,  253,  253,  272,  609,  272,  609,  272,
      279,  609,  279,  609,  279,  295,  609,  295,  609,  295,
      314,  609,  314,  314,  314,  322,  609,  322,  322,  322,
      338,  609,  338,  338,  338,    9,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609
    } ;

static const flex_int16_t yy_chk[3427] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       22,   22,   25,   30,   29,   31,  190,   35,   30,   36,
       25,   29,   40,   32,   33,   34,   37,   32,   38,   40,
       33,   34,   29,   30,  190,   31,   35,   46,   30,   36,
       40,   29,   32,   33,   34,   47,   37,   32,   38,   40,
       33,   34,   41,   42,   43,   44,   46,   41,   43,   42,
       48,   44,   65,   65,   45,   47,   48,   49,   68,  611,

       45,   42,   41,   43,   44,  610,   68,   41,   43,   42,
       48,   44,   43,   45,  107,  107,   48,   49,  149,  149,
       45,   71,   71,  184,  184,   71,   71,   71,   71,   71,
       71,   71,   71,  555,   73,   71,   71,   71,   71,   71,
       71,   73,   74,  189,  191,  110,   73,   75,   74,   74,
      152,   75,   73,  110,   75,   75,  195,  480,  152,  192,
       74,   73,  198,  189,  191,   75,   73,  375,   74,   74,
       75,  226,  226,  196,   75,   75,  195,  192,   71,   71,
       71,   72,   72,  198,  197,   72,   72,   72,   72,   72,
       72,   72,   72,  196,  199,   72,   72,   72,   72,   72,

       72,   72,   76,   77,  197,   76,   77,  315,   72,   76,
       77,   76,   77,  201,  199,  203,   82,  275,  275,   72,
       76,   77,  273,  202,   76,   77,   82,   79,   72,   76,
       77,   76,   77,  201,   79,  203,   79,   78,   72,   72,
       72,   78,  202,   80,   78,   79,  205,  224,   80,  213,
       80,  206,  207,   82,   79,   78,   79,   82,   81,  208,
       78,   80,   82,   81,   78,   81,  205,   82,   80,  206,
       80,  180,  207,  318,  318,  153,   81,  208,  209,  143,
      141,  139,  111,   81,  101,   81,   83,   83,  212,  214,
       83,   83,   83,   83,   83,   83,   83,   83,  209,   85,

       83,   83,   83,   83,   83,   83,   85,   86,  212,  214,
       99,   85,   90,   86,   86,  216,   90,   85,  215,   90,
       98,  217,  116,  220,   69,   86,   85,   59,  116,  116,
       90,   85,   54,   86,   86,   90,  216,   26,  215,   90,
      116,  217,  220,   83,   83,   83,   84,   84,  116,  116,
       84,   84,   84,   84,   84,   84,   84,   84,  357,   19,
       84,   84,   84,   84,   84,   84,   84,   87,   16,   88,
      359,   87,   88,   84,   87,   87,   88,  357,   88,   89,
       14,   11,   89,  361,   84,   87,   89,   88,   89,  359,
       87,   88,  219,   84,   87,   87,   88,   89,   88,   87,

       91,   89,  361,   84,   84,   84,   89,   91,   89,   91,
       92,    9,  219,  121,  221,   92,  222,   92,   91,  358,
      121,   92,  121,    0,    0,   93,  360,   91,   92,   91,
       93,  121,   93,  372,  221,   92,  222,   92,    0,  358,
      121,   92,  121,   93,  360,  363,    0,    0,    0,    0,
       93,  372,   93,  113,  113,  366,  113,  367,  113,    0,
      113,  113,  113,  113,  113,  363,  115,  113,  113,  113,
      113,  113,  113,  115,  368,  366,  369,  367,  115,  117,
      370,  120,  371,  117,  115,  120,  117,  117,  120,  113,
      374,    0,    0,  115,  368,  369,  382,  117,  115,  120,

      370,  371,  117,    0,  120,  373,  117,  117,  120,  374,
      113,  113,  113,  114,  114,  382,  114,  473,  114,  377,
      114,  114,  114,  114,  114,  373,  380,  114,  114,  114,
      114,  114,  114,  114,  118,  119,  473,  118,  119,  377,
      114,  118,  119,  118,  119,  381,  380,  383,    0,  114,
        0,  114,  118,  119,    0,    0,  118,  119,  466,  469,
      114,  118,  119,  118,  119,  381,  478,  383,  122,  123,
      114,  114,  114,  122,  123,  122,  123,    0,  466,  469,
      485,  475,    0,  479,    0,  478,  122,  123,    0,  550,
        0,    0,    0,  122,  123,  122,  123,  124,  124,  485,

      124,  475,  124,  479,  124,  124,  124,  124,  124,  550,
      126,  124,  124,  124,  124,  124,  124,  126,  127,  554,
      581,    0,  126,  131,  127,  127,    0,  131,  126,  582,
      131,  593,    0,  124,    0,    0,  127,  126,    0,  554,
      581,  131,  126,  594,  127,  127,  131,    0,    0,  582,
      131,  593,  132,    0,  124,  124,  124,  125,  125,  132,
      125,  132,  125,  594,  125,  125,  125,  125,  125,    0,
      132,  125,  125,  125,  125,  125,  125,  125,  128,  132,
      129,  132,  128,  129,  125,  128,  128,  129,    0,  129,
        0,    0,    0,  125,    0,  125,  128,    0,  129,    0,

        0,  128,  129,    0,  125,  128,  128,  129,    0,  129,
      128,    0,    0,    0,  125,  125,  125,  130,  133,    0,
      130,    0,    0,  133,  130,  133,  130,    0,    0,  133,
      162,    0,    0,  134,  162,  130,  133,  162,  134,  130,
      134,    0,    0,  133,  130,  133,  130,    0,  162,  133,
        0,  134,    0,  162,    0,    0,    0,  162,  134,    0,
      134,  155,  155,    0,  155,  155,  155,  155,  155,  155,
      155,  155,  155,    0,  157,  155,  155,  155,  155,  155,
      155,  157,  158,    0,    0,    0,  157,  159,  158,  158,
        0,  159,  157,    0,  159,  159,    0,  155,    0,    0,

      158,  157,    0,    0,    0,  159,  157,    0,  158,  158,
      159,    0,    0,    0,  159,  159,    0,    0,  155,  155,
      155,  156,  156,    0,  156,  156,  156,  156,  156,  156,
      156,  156,  156,    0,    0,  156,  156,  156,  156,  156,
      156,  156,  160,  161,    0,  160,  161,    0,  156,  160,
      161,  160,  161,    0,    0,    0,    0,  156,    0,  156,
      160,  161,    0,    0,  160,  161,  163,    0,  156,  160,
      161,  160,  161,  163,    0,  163,  164,    0,  156,  156,
      156,  164,  165,  164,  163,    0,    0,  165,    0,  165,
        0,    0,    0,  163,  164,  163,    0,    0,    0,    0,

      165,  164,    0,  164,    0,    0,    0,  165,    0,  165,
      166,  166,    0,  166,  166,  166,  166,  166,  166,  166,
      166,  166,    0,  168,  166,  166,  166,  166,  166,  166,
      168,  169,    0,    0,    0,  168,  173,  169,  169,    0,
      173,  168,    0,  173,    0,    0,  166,    0,    0,  169,
      168,    0,    0,    0,  173,  168,    0,  169,  169,  173,
        0,    0,    0,  173,    0,  230,    0,  166,  166,  166,
      167,  167,  230,  167,  167,  167,  167,  167,  167,  167,
      167,  167,    0,  230,  167,  167,  167,  167,  167,  167,
      167,  170,  230,  171,  232,  170,  171,  167,  170,  170,

      171,  232,  171,    0,    0,    0,  167,    0,  167,  170,
        0,  171,  232,    0,  170,  171,    0,  167,  170,  170,
      171,  232,  171,  170,    0,    0,    0,  167,  167,  167,
      172,  174,    0,  172,    0,    0,  175,  172,  174,  172,
      174,  175,    0,  175,    0,    0,  176,  175,  172,  174,
        0,  176,  172,  176,  175,    0,    0,  172,  174,  172,
      174,  175,  231,  175,  176,  233,    0,  175,  234,  231,
        0,  176,  233,  176,  231,  234,    0,  233,  235,    0,
      231,  236,    0,  233,    0,  235,  234,    0,  236,  231,
        0,    0,  233,  237,  231,  234,  235,  233,  237,  236,

      237,    0,    0,  238,    0,  235,  239,  240,  236,    0,
      238,  237,    0,  239,  240,  239,  238,    0,  237,  241,
      237,  238,  240,    0,  239,  240,  241,    0,    0,    0,
      238,  242,  241,  239,  240,  239,  238,  241,  242,    0,
        0,  243,    0,  240,  244,    0,  241,  244,  243,  242,
      243,  244,  241,    0,  245,    0,  253,  254,  242,  243,
      245,  245,  244,  253,  254,    0,  244,    0,  243,  254,
      243,  244,  245,    0,  253,  254,    0,    0,  255,  256,
      245,  245,    0,  253,  254,  255,  256,    0,    0,  254,
        0,  256,  257,    0,  258,  259,  255,  256,    0,  257,

      260,  258,  259,    0,    0,  255,  256,  260,  262,    0,
      257,  256,  258,  259,    0,  262,    0,    0,  260,  257,
        0,  258,  259,  261,  263,    0,  262,  260,  261,  264,
      261,  263,    0,    0,    0,  262,  264,  263,  264,    0,
        0,  261,  263,  262,    0,  265,  266,  264,  261,    0,
      261,  263,  265,  266,    0,    0,  264,  263,  264,  266,
      265,    0,  267,  265,  266,    0,    0,  268,  269,  267,
      270,  269,  265,  266,  268,  269,  268,  270,    0,  266,
      267,  265,    0,    0,  270,  268,  269,    0,  270,  267,
      269,    0,  271,  279,  268,  269,  268,  270,  271,  271,

      279,    0,    0,    0,  270,  280,  281,  283,  284,  282,
      271,  279,  280,  281,  283,  284,  282,  280,  271,  271,
      279,  282,  285,  280,  281,  283,  284,  282,    0,  285,
        0,    0,  280,  281,  283,  284,  282,  280,  286,  287,
      285,  282,    0,  286,  288,  286,  287,    0,    0,  285,
        0,  288,  287,  288,    0,    0,  286,  287,    0,    0,
      289,  290,  288,  286,    0,  286,  287,  289,  290,    0,
        0,  288,  287,  288,  290,  289,    0,  291,  289,  290,
        0,    0,  292,  293,  291,    0,  293,  289,  290,  292,
      293,  292,    0,    0,  290,  291,  289,    0,    0,    0,

      292,  293,    0,    0,  291,  293,  294,  295,  296,  292,
      293,  292,  294,  294,  295,  296,    0,    0,    0,    0,
      296,  297,    0,    0,  294,  295,  296,    0,  297,  298,
        0,  299,  294,  294,  295,  296,  298,  300,  299,  297,
      296,  298,    0,    0,  300,  301,    0,  298,  297,  299,
      302,    0,  301,    0,    0,  300,  298,  302,  299,    0,
      303,  298,  304,  301,  300,  303,  305,  303,  302,  304,
        0,    0,  301,  305,  306,    0,    0,  302,  303,  305,
      304,  306,    0,  306,  305,  303,    0,  303,    0,  304,
        0,  307,  306,  305,    0,  308,    0,  304,  307,  305,

        0,  306,  308,  306,    0,  309,  307,  310,  308,  307,
        0,    0,  309,  308,  310,    0,  310,  311,  307,  312,
      311,    0,  308,  309,  311,  310,  312,  307,  308,    0,
        0,  322,  309,  312,  310,  311,  310,  312,  322,  311,
        0,  313,    0,  323,  311,  324,  312,  313,  313,  322,
      323,    0,  324,  312,    0,  323,    0,    0,  322,  313,
        0,  323,  325,  324,  326,    0,  327,  313,  313,  325,
      323,  326,  324,  327,  325,  323,    0,    0,  328,    0,
      325,  329,  326,    0,  327,  328,  329,    0,  329,  325,
        0,  326,    0,  327,  325,    0,  328,  330,    0,  329,

      331,    0,    0,    0,  330,  328,  329,  331,  329,  331,
      330,    0,    0,  332,    0,  330,  334,    0,  331,  333,
      332,    0,    0,  334,  330,    0,  333,  331,  332,  331,
      330,  332,  333,    0,  334,  335,    0,  333,  336,    0,
      332,  336,  335,  334,  335,  336,  333,    0,  337,  332,
      338,  339,  333,  335,  337,  337,  336,  338,  339,    0,
      336,    0,  335,  339,  335,  336,  337,    0,  338,  339,
        0,    0,  340,  341,  337,  337,    0,  338,  339,  340,
      341,    0,    0,  339,    0,  341,  342,    0,  343,  344,
      340,  341,    0,  342,  345,  343,  344,    0,    0,  340,

      341,  345,  347,    0,  342,  341,  343,  344,    0,  347,
        0,    0,  345,  342,    0,  343,  344,  346,  348,    0,
      347,  345,  346,  349,  346,  348,    0,    0,    0,  347,
      349,  348,  349,    0,    0,  346,  348,  347,    0,  350,
      351,  349,  346,    0,  346,  348,  350,  351,    0,    0,
      349,  348,  349,  351,  350,    0,  352,  350,  351,    0,
        0,  353,  354,  352,  355,  354,  350,  351,  353,  354,
      353,  355,    0,  351,  352,  350,    0,    0,  355,  353,
      354,    0,  355,  352,  354,    0,  356,    0,  353,  354,
      353,  355,  356,  356,    0,    0,  384,    0,  355,  384,

        0,    0,    0,  384,  356,    0,    0,    0,  385,  387,
        0,  387,  356,  356,  384,  385,  387,    0,  384,    0,
      385,  386,    0,  384,  386,    0,  385,  387,  386,  387,
        0,  388,    0,    0,  388,  385,  387,  389,  388,  386,
      385,    0,    0,  386,  389,  391,    0,  390,  386,  388,
        0,    0,  391,  388,  390,  389,    0,  390,  388,    0,
      392,  393,  394,  391,  389,  390,  395,  392,  393,  394,
      394,    0,  391,  395,  390,    0,    0,  390,  392,  393,
      394,    0,    0,    0,  395,  397,    0,  392,  393,  394,
      394,  396,  397,  395,  396,    0,    0,  397,  396,    0,

        0,  398,    0,  397,  398,    0,    0,    0,  398,  396,
        0,    0,  397,  396,  399,  400,  399,  397,  396,  398,
        0,  399,  400,  398,    0,    0,    0,  400,  398,    0,
      402,    0,  399,  400,  399,    0,  401,  402,  403,  401,
        0,  399,  400,  401,  405,  403,  406,  400,  402,    0,
        0,  405,    0,  406,  401,    0,  403,  402,  401,  402,
      404,  407,  405,  401,  406,  403,    0,  404,  407,    0,
      404,  405,    0,  406,  408,    0,  410,  409,  404,  407,
      409,  408,  408,  410,  409,    0,    0,  404,  407,    0,
      404,    0,  408,  411,  410,  409,  411,    0,  412,  409,

      411,  408,  408,  410,  409,  412,  413,    0,    0,  413,
      412,  411,    0,  413,    0,  411,  412,    0,    0,  414,
      411,  414,    0,    0,  413,  412,  414,  416,  413,  415,
      412,  417,  415,  413,  416,  418,  415,  414,  417,  414,
        0,  417,  418,    0,    0,  416,  414,  415,  419,  417,
      420,  415,  421,  418,  416,  419,  415,  420,  417,  421,
      421,  417,  418,    0,  422,    0,  419,    0,  420,    0,
      421,  422,    0,    0,    0,  419,  424,  420,  423,  421,
      421,  423,  422,  424,    0,  423,    0,    0,  424,    0,
        0,  422,  425,    0,  424,  425,  423,    0,    0,  425,

      423,    0,  426,  424,  426,  423,  427,    0,  424,  426,
      425,    0,    0,  427,  425,    0,    0,    0,  427,  425,
      426,  430,  426,  428,  427,  429,  428,    0,  430,  426,
      428,    0,  429,  427,    0,  432,    0,  431,  427,  430,
        0,  428,  432,  429,  431,  428,    0,  431,  430,    0,
      428,  433,  429,  432,  429,  431,  434,    0,  433,    0,
        0,    0,  432,  434,  431,    0,    0,  431,  435,  433,
      436,    0,  437,  436,  434,  435,  435,  436,  433,  437,
        0,    0,  438,  434,  443,  438,  435,    0,  436,  438,
      437,  443,  436,    0,  439,  435,  435,  436,    0,  437,

      438,  439,  443,    0,  438,    0,  439,  440,    0,  438,
      440,  443,  439,  441,  440,  441,    0,    0,    0,    0,
      441,  439,    0,    0,    0,  440,  439,    0,    0,  440,
        0,  441,  442,  441,  440,  442,    0,  444,  445,  442,
      441,    0,  446,    0,  444,  445,    0,  444,    0,  446,
      442,    0,    0,    0,  442,  444,  445,    0,    0,  442,
      446,  447,    0,  448,  444,  445,  449,  444,  447,  446,
      448,  448,    0,  449,    0,    0,    0,    0,    0,  447,
      450,  448,  451,  450,  449,  454,    0,  450,  447,  451,
      448,  448,  454,  449,  451,    0,    0,  454,  450,    0,

      451,  452,  450,  454,  452,    0,    0,  450,  452,  451,
        0,  453,  454,  453,  451,  456,    0,  454,  453,  452,
        0,    0,  456,  452,    0,  457,    0,  455,  452,  453,
      455,  453,  457,  456,  455,    0,    0,    0,  453,  459,
      458,  460,  456,  457,  456,  455,  459,  458,  460,  455,
      458,    0,  457,  461,  455,  462,    0,  459,  458,  460,
      461,    0,  462,  462,    0,    0,  459,  458,  460,  463,
      458,  461,  463,  462,  464,    0,  463,  486,    0,    0,
      461,  464,  462,  462,  486,    0,    0,  463,    0,    0,
      487,  463,  464,  488,    0,  486,  463,  487,  489,    0,

      488,  464,  487,  490,  486,  489,  491,    0,  487,    0,
      490,  488,    0,  491,  490,    0,  489,  487,    0,  492,
      488,  490,  487,    0,  491,  489,  492,    0,    0,  493,
      490,  495,  494,  491,  490,  494,  493,  492,  495,  494,
        0,    0,    0,    0,  497,  496,  492,  493,  498,  495,
      494,  497,  496,    0,  494,  498,  493,  496,  495,  494,
        0,  499,  497,  496,  499,    0,  498,  500,  499,  501,
        0,  497,  496,  502,  500,  498,  501,  496,  500,  499,
      502,    0,    0,  499,    0,  500,  503,  501,  499,    0,
      504,  502,  505,  503,  500,  501,  501,  504,  500,  505,

      502,    0,  506,    0,  503,  506,    0,  507,  504,  506,
      505,    0,    0,  503,  507,  508,    0,  504,    0,  505,
      506,  509,  508,  510,  506,  507,    0,  508,  509,  506,
      510,    0,    0,  508,  507,    0,  512,  513,  511,  509,
        0,  510,  508,  512,  513,  511,    0,  508,  509,  511,
      510,    0,  514,    0,  512,  513,  511,    0,    0,  514,
      516,    0,    0,  512,  513,  511,    0,  516,  515,  511,
      514,  515,    0,  517,  518,  515,  519,    0,  516,  514,
      517,  518,    0,  519,    0,  517,  515,  516,    0,    0,
      515,  517,  518,    0,  519,  515,    0,  521,    0,  520,

      517,  518,  520,  519,  521,  517,  520,  522,  521,  523,
        0,  524,  525,  526,  522,  521,  523,  520,  524,  525,
      526,  520,    0,    0,  521,  522,  520,  523,  521,  524,
      525,  526,    0,  522,  522,  528,  523,    0,  524,  525,
      526,  527,  528,  529,  527,    0,    0,  530,  527,  531,
      529,  533,    0,  528,  530,  529,  531,    0,  533,  527,
        0,  529,  528,  527,  534,  530,  532,  531,  527,  533,
      529,  534,  535,  532,  530,  529,  531,  532,  533,  535,
      536,    0,  534,  536,  532,  537,    0,  536,  538,    0,
      535,  534,  537,  532,    0,  538,    0,  532,  536,  535,

      538,  539,  536,  537,  540,    0,  538,  536,  539,    0,
        0,  540,  537,    0,  541,  538,  542,  541,    0,  539,
      538,  541,  540,  542,    0,    0,  543,  542,  539,    0,
      544,  540,  541,  543,  542,    0,  541,  544,  545,    0,
        0,  541,  546,  542,  543,  545,    0,  542,  544,  546,
        0,    0,  543,  543,  547,  548,  545,  544,  548,    0,
      546,  547,  548,    0,    0,  545,    0,  557,    0,  546,
        0,    0,  547,  548,  557,    0,    0,  548,    0,    0,
      558,  547,  548,  559,  560,  557,  558,  558,    0,    0,
      559,  560,    0,    0,  557,    0,  561,    0,  558,    0,

        0,  559,  560,  561,    0,    0,  558,  558,    0,  562,
      559,  560,  563,  564,  561,  562,  562,    0,    0,  563,
      564,    0,    0,  561,    0,  565,    0,  562,    0,    0,
      563,  564,  565,  563,    0,  562,  562,    0,  566,  563,
      564,  567,  568,  565,  566,  566,    0,    0,  567,  568,
        0,    0,  565,    0,  569,    0,  566,    0,    0,  567,
      568,  569,    0,    0,  566,  566,    0,  570,  567,  568,
      571,  572,  569,  570,  570,    0,    0,  571,  572,    0,
        0,  569,    0,  573,    0,  570,    0,    0,  571,  572,
      573,  571,    0,  570,  570,    0,  574,  571,  572,  575,

      576,  573,  574,  574,    0,    0,  575,  576,    0,    0,
      573,    0,  577,    0,  574,    0,    0,  575,  576,  577,
        0,    0,  574,  574,    0,  578,  575,  576,  579,  580,
      577,  578,  578,    0,    0,  579,  580,    0,    0,  577,
        0,  584,    0,  578,    0,    0,  579,  580,  584,  579,
        0,  578,  578,  585,  584,  579,  580,  586,    0,  584,
      585,    0,    0,  587,  586,  588,  585,    0,  584,    0,
      587,  585,  588,    0,  584,  586,  587,    0,  588,    0,
      585,  587,  589,  588,  586,    0,  585,  592,  590,  589,
      587,    0,  588,    0,  592,  590,  587,    0,  588,    0,

      589,  590,    0,    0,  591,  592,  590,    0,    0,  589,
        0,  591,  595,    0,  592,  590,  596,  591,    0,  595,
      597,  590,  591,  596,  595,    0,    0,  597,  596,    0,
      595,  591,  597,  598,  596,    0,    0,  591,  597,  595,
      598,    0,    0,  596,  595,  598,  599,  597,  596,  600,
      603,  598,  597,  599,    0,    0,  600,  603,  599,    0,
      598,  600,  604,    0,  599,  598,    0,  600,  603,  604,
        0,    0,  605,  599,    0,  606,  600,  603,  599,  605,
      604,  600,  606,    0,    0,  607,    0,  608,    0,  604,
      605,    0,  607,  606,  608,    0,    0,    0,    0,  605,

        0,    0,  606,  607,    0,  608,    0,    0,    0,    0,
        0,    0,  607,    0,  608,  612,    0,    0,  612,  612,
      613,    0,    0,  613,  613,  614,  614,  614,  614,  614,
      615,    0,    0,  615,  615,  616,    0,  616,    0,  616,
      617,    0,  617,    0,  617,  618,    0,  618,    0,  618,
      619,    0,  619,  619,  619,  620,    0,  620,  620,  620,
      621,    0,  621,  621,  621,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[65] =
    {   0,
      128,  133,  140,  144,  147,  151,  155,  166,  174,  188,
      193,  247,  252,  265,  266,  267,  268,  270,  274,  278,
      284,  288,  294,  298,  302,  306,  310,  315,  319,  323,
      327,  331,  336,  340,  345,  349,  353,  357,  362,  368,
      374,  379,  384,  388,  392,  395,  398,  400,  402,  404,
      406,  408,  410,  412,  414,  416,  418,  420,  422,  424,
      426,  428,  430,  437
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 13 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>
#include <string>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex


/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

int comment_layer = 0;
/*
 *  Add Your own definitions here
 */
#define CheckStringLonger(buf, buf_ptr) (buf_ptr - buf) > MAX_STR_CONST ? 1 : 0;

/*
void set_error_msg(const char *msg) {
  yylex = ERROR;
  yylval.error_msg = msg;

}
*/
#line 1552 "cool-lex.cc"
/*
 * Define names for regular expressions here.
 */

/*
  # define YYTOKENTYPE
    Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  
   enum yytokentype {
     CLASS = 258,
     ELSE = 259,
     FI = 260,
     IF = 261,
     IN = 262,
     INHERITS = 263,
     LET = 264,
     LOOP = 265,
     POOL = 266,
     THEN = 267,
     WHILE = 268,
     CASE = 269,
     ESAC = 270,
     OF = 271,
     DARROW = 272,
     NEW = 273,
     ISVOID = 274,
     STR_CONST = 275,
     INT_CONST = 276,
     BOOL_CONST = 277,
     TYPEID = 278,
     OBJECTID = 279,
     ASSIGN = 280,
     NOT = 281,
     LE = 282,
     ERROR = 283,
     LET_STMT = 285
   };
*/
#line 1591 "cool-lex.cc"

#define INITIAL 0
#define STRING 1
#define COMMENT 2
#define INLINE_COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 119 "cool.flex"




#line 124 "cool.flex"
 /*
  *  Nested comments
  */

#line 1884 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 610 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3366 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 65 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 65 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 66 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 128 "cool.flex"
{
  comment_layer++;
  BEGIN COMMENT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 133 "cool.flex"
{
  comment_layer--;
  if(comment_layer == 0){
    BEGIN 0;
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 140 "cool.flex"
{

}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 144 "cool.flex"
{

}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 147 "cool.flex"
{
  BEGIN(INLINE_COMMENT);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 151 "cool.flex"
{

}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 155 "cool.flex"
{
  curr_lineno++;
  BEGIN 0;
}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 160 "cool.flex"
{
  yylval.error_msg = "EOF in comment";
  BEGIN 0;
  return ERROR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 166 "cool.flex"
{
  yylval.error_msg = "Unmatched *)";
  return ERROR;
}
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 9:
YY_RULE_SETUP
#line 174 "cool.flex"
{ return (DARROW); }
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 10:
YY_RULE_SETUP
#line 188 "cool.flex"
{
  BEGIN(STRING);
  yymore();
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 193 "cool.flex"
{ 
  std::string input(yytext, yyleng);
  input = input.substr(1, input.length()-2); 

  if(input.find_first_of('\0') != std::string::npos){
    yylval.error_msg = "String contains null character";
    BEGIN 0;
    return ERROR;
  }
  string_buf_ptr = string_buf;
  for(int i=0; i < input.length(); i++) {
    if(input[i] == '\\'){
      switch (input[i+1]){
        case 't':
          *string_buf_ptr++ = '\t';
          break;
        case 'b':
          *string_buf_ptr++ = '\b';
          break;

        case 'n':
          *string_buf_ptr++ = '\n';
          break;

        case 'f':
          *string_buf_ptr++ = '\f';
          break;

        default:
          *string_buf_ptr++ = input[i+1];
          break;
      }
      i++;

    } 
    else {
      *string_buf_ptr++ = input[i];
    }

  }

  if(string_buf_ptr - string_buf > MAX_STR_CONST){
    yylval.error_msg = "String constant too long";
    BEGIN 0;
    return ERROR;
  }

  yylval.symbol = stringtable.add_string(string_buf);
  BEGIN 0;
  return STR_CONST;

}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 247 "cool.flex"
{
  yylval.error_msg = "String contains null character";
  return ERROR;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 252 "cool.flex"
{
  yylval.error_msg = "error unterminated string constant";
  return ERROR;
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 258 "cool.flex"
{
  yylval.error_msg = "unterminated string";
  BEGIN 0;
  yyrestart(yyin);
  return ERROR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 265 "cool.flex"
{yymore();}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 266 "cool.flex"
{yymore();}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 267 "cool.flex"
{yymore();}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 268 "cool.flex"
{yymore();}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 270 "cool.flex"
{
  yymore();  
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 274 "cool.flex"
{
  yymore();
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 278 "cool.flex"
{
  curr_lineno++;
  yymore();
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 284 "cool.flex"
{
   return CLASS;
 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 288 "cool.flex"
{
  return ELSE;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 294 "cool.flex"
{
   return FI;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 298 "cool.flex"
{
  return IF;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 302 "cool.flex"
{
  return IN;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 306 "cool.flex"
{
  return INHERITS;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 310 "cool.flex"
{
  return ISVOID;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 315 "cool.flex"
{
  return LET;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 319 "cool.flex"
{
  return  LOOP;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 323 "cool.flex"
{
  return POOL;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 327 "cool.flex"
{
  return THEN;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 331 "cool.flex"
{
  return WHILE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 336 "cool.flex"
{
  return CASE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 340 "cool.flex"
{
  return ESAC;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 345 "cool.flex"
{
  return NEW;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 349 "cool.flex"
{
  return OF;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 353 "cool.flex"
{
  return NOT;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 357 "cool.flex"
{
  yylval.boolean = 0;
  return BOOL_CONST;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 362 "cool.flex"
{
  yylval.boolean = 1;
  return BOOL_CONST;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 368 "cool.flex"
{
  yylval.symbol = inttable.add_string(yytext);
  return INT_CONST;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 374 "cool.flex"
{
  yylval.symbol = idtable.add_string(yytext);
  return TYPEID;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 379 "cool.flex"
{
  yylval.symbol = idtable.add_string(yytext);
  return OBJECTID;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 384 "cool.flex"
{
  
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 388 "cool.flex"
{
  curr_lineno++;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 392 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
/* LE */
case 46:
YY_RULE_SETUP
#line 395 "cool.flex"
{ return LE; }
	YY_BREAK
/* DARROW */
case 47:
YY_RULE_SETUP
#line 398 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 400 "cool.flex"
{ return int('+'); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 402 "cool.flex"
{ return int('-'); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 404 "cool.flex"
{ return int('*'); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 406 "cool.flex"
{ return int('/'); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 408 "cool.flex"
{ return int('<'); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 410 "cool.flex"
{ return int('='); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 412 "cool.flex"
{ return int('.'); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 414 "cool.flex"
{ return int(';'); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 416 "cool.flex"
{ return int('~'); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 418 "cool.flex"
{ return int('{'); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 420 "cool.flex"
{ return int('}'); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 422 "cool.flex"
{ return int('('); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 424 "cool.flex"
{ return int(')'); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 426 "cool.flex"
{ return int(':'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 428 "cool.flex"
{ return int('@'); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 430 "cool.flex"
{ return int(','); }
	YY_BREAK
/* =====
  * error
  * =====
  */
case 64:
YY_RULE_SETUP
#line 437 "cool.flex"
{
  yylval.error_msg = yytext;
  return ERROR;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 442 "cool.flex"
ECHO;
	YY_BREAK
#line 2480 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INLINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 610 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 610 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 609);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 442 "cool.flex"


