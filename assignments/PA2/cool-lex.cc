#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[614] =
    {   0,
        0,    0,   18,   18,    3,    3,    6,    6,   64,   63,
       43,   10,   58,   59,   49,   47,   62,   48,   53,   50,
       60,   54,   51,   52,   61,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   56,   57,
       55,   18,   13,   11,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   63,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,    3,    4,    3,    4,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    6,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    8,    5,   44,   45,
        9,   40,   40,   40,   40,   40,   40,   24,   25,   26,
       40,   40,   40,   40,   37,   40,   40,   40,   41,   41,

       41,   41,   41,   41,   24,   25,   26,   41,   41,   41,
       41,   41,   37,   41,   41,   41,   41,   18,    8,   18,
       18,    9,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   19,
       20,   12,   15,   17,   14,   16,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,    3,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   40,   40,
       40,   40,   40,   40,   29,   40,   36,   38,   40,   40,
       40,   41,   41,   41,   41,   41,   41,   41,   29,   41,
       36,   38,   41,   41,   41,   41,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
       34,   40,   40,   22,   35,   40,   30,   31,   32,   40,
       34,   41,   22,   35,   41,   41,   41,   30,   31,   32,
       39,   41,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   21,   40,
       40,   33,   21,   23,   41,   41,   33,   18,   18,   18,
       18,   18,   18,   18,   18,   18,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,   40,   41,   28,   18,   18,   18,
        3,    3,    3,    6,    6,    6,   40,   41,   18,   18,

        3,    3,    6,    6,   27,   27,   18,   18,    3,    3,
        6,    6,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    1,    1,    4,
        5,    6,    7,    8,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   21,   21,   29,   21,   30,   31,   32,
       21,   33,   34,   35,   36,   21,   37,   21,   21,   21,
        1,   38,    1,    1,   13,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   45,   45,   48,   45,   49,
       50,   51,   45,   52,   53,   54,   55,   56,   57,   45,
       45,   45,   58,    1,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[61] =
    {   0,
        1,    2,    3,    4,    1,    4,    1,    1,    1,    1,
        1,    5,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1
    } ;

static const flex_int16_t yy_base[626] =
    {   0,
        0,    0,   60,    0,  120,    0,  180,    0,  644, 2990,
     2990, 2990,  610, 2990,  579, 2990, 2990,  562, 2990, 2990,
     2990, 2990,  232,  551, 2990,    0,  222,  527,  214,  216,
      220,  222,  223,  227,  224,  229,  230,    0,  239,  248,
      260,  256,  260,  261,  235,  252,  262,  266, 2990, 2990,
     2990,    0, 2990, 2990,    0,    0,  513,    0,    0,    0,
        0,    0,    0,    0,  281,  499,    0,  314,  374,  306,
      307,  319,  375,  320,  377,  382,  408,  323,  409,  429,
      483,  543,  415,  423,  483,  485,  544,  486,  490,  547,
      550,    0,    0,    0,    0,  476,    0,  476,    0,    0,

        0,    0,    0,    0,    0,  344,  462,    0,  603,  663,
      447,  595,  603,  608,  664,  665,  610,  689,  561,  671,
      739,  799,  731,  677,  739,  743,  800,  746,  801,  833,
      806,    0,    0,    0,    0, 2990,  468,    0,  445,    0,
        0,    0,    0,    0,    0,    0,  347,  397,    0,  885,
      945,  517,  877,  835,  885,  888,  889,  836,  937,  950,
      951, 1005, 1065,  997,  953, 1005, 1009, 1066, 1012, 1067,
     1099, 1072,    0,    0,    0, 2990, 2990, 2990, 2990, 2990,
     2990,    0,  260,  277,  386,  304,  357,    0,    0,  371,
      364,  409,  280,  407,    0,  414,  422,  425,    0,  426,

      446,  443,  484,  478,    0,    0,  493,  354,  531,  547,
      568,  591,    0,  596,  612,  604,  639,    0,    0,    0,
        0,    0, 1073, 1102, 1110, 1114, 1132, 1115, 1117, 1128,
     1148, 1144, 1162, 1149, 1170, 1175, 1182, 1196, 1199, 2990,
     2990, 2990, 2990, 2990, 2990, 2990, 1197, 1214, 1202, 1220,
     1213, 1231, 1235, 1236, 1249, 1243, 1257, 1269, 1265, 1281,
     1286, 1292, 1304, 1310, 1316,    0, 2990,    0,    0,    0,
     1312, 1328, 1330, 1346, 1348, 1341, 1354, 1359, 1370, 1371,
     1383, 1384, 1391, 1388, 1409, 1422, 1415, 1408, 1435, 1429,
     1446, 1447, 1452, 1453, 1458, 1469, 1464, 1484, 1485, 1489,

     1501, 1502, 1514, 1527, 1532, 1545,    0,    0,    0,    0,
        0,    0, 1519, 1543, 1540, 1569, 1565, 1561, 1577, 1581,
     1585, 1599, 1601, 1606, 1607, 1619, 1621, 1644, 1637, 1650,
     1652, 1668, 1670, 1673, 1674, 1681, 1686, 1697, 1699, 1711,
     1710, 1715, 1722, 1742, 1744, 1758, 1757, 1760,  702,  699,
      381,  719,  739,  752,    0,  771,    0,    0,  794,  795,
      798,  844,  873,  897,  900,  933,  945,  337,    0,  940,
        0,    0,  946,  997, 1004, 1013, 1771, 1782, 1789, 1800,
     1793, 1807, 1813, 1824, 1818, 1820, 1825, 1840, 1838, 1854,
     1842, 1867, 1872, 1878, 1879, 1880, 1885, 1903, 1905, 1909,

     1916, 1917, 1938, 1920, 1949, 1941, 1943, 1975, 1976, 1982,
     1964, 1981, 1980, 1987, 2002, 2007, 2013, 2014, 2020, 2040,
     2043, 2046, 2047, 2058, 2072, 2073, 2078, 2080, 2084, 2105,
     2098, 2109, 2116, 2113, 2140, 2138, 2143, 2151, 2154, 2169,
     2156, 2158, 2176, 2180, 2183, 2187, 2198, 2214, 2219, 2213,
     2216, 2234, 2248, 2249, 2250, 2251, 2254, 2256, 2283, 2272,
        0, 1054,  351,    0,    0, 1056,    0,    0,    0, 1067,
        0, 1136,    0,    0, 1157, 1151,  329,    0,    0,    0,
        0, 1247, 2286, 2289, 2301, 2290, 2304, 2312, 2315, 2319,
     2326, 2333, 2327, 2339, 2341, 2357, 2359, 2362, 2364, 2365,

     2370, 2377, 2388, 2395, 2400, 2401, 2402, 2403, 2424, 2426,
     2427, 2432, 2438, 2440, 2453, 2456, 2464, 2467, 2478, 2485,
     2491, 2471, 2493, 2496, 2507, 2523, 2511, 2522, 2525, 2528,
     2529, 2545, 2543, 2559, 2560, 2561, 2563, 2567, 2566, 2574,
     2592, 2590, 2597, 2598, 2604, 2610, 2612, 2630,    0,  330,
     1279,    0,    0,    0, 1290,  300,    0, 2627, 2628, 2633,
     2635, 2648, 2650, 2662, 2664, 2665, 2666, 2682, 2679, 2695,
     2696, 2699, 2703, 2716, 2700, 2717, 2732, 2734, 2720, 2737,
     2740, 2755, 2757, 2758, 1319, 1351,    0, 2769, 2772, 2771,
     2789, 2792, 2793, 2809, 2810, 2813, 1381, 1418, 2831, 2833,

     2839, 2846, 2854, 2862,    0,    0, 2869, 2875, 2877, 2880,
     2883, 2891, 2990,  301,  253, 2939, 2944, 2949, 2954, 2959,
     2964, 2969, 2974, 2979, 2984
    } ;

static const flex_int16_t yy_def[626] =
    {   0,
      613,    1,  613,    3,  613,    5,  613,    7,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  613,  613,
      613,  616,  613,  613,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  617,  617,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,  618,
      619,  619,   82,   82,   82,   82,   82,   82,   82,   82,
       82,  616,  616,  616,  620,  613,  620,  613,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  621,  621,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      622,  622,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  620,  620,  620,  623,  613,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  624,
      624,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  625,  625,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  623,  623,  623,  613,  613,  613,  613,  613,
      613,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,  613,
      613,  613,  613,  613,  613,  613,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,  620,  613,  620,  620,  620,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  623,  623,  623,  623,
      623,  623,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  614,  614,
      614,  614,  615,  615,  615,  615,  615,   69,   69,   69,
       69,   82,   82,   82,   82,   82,  110,  110,  110,  110,
      122,  122,  122,  122,  122,  151,  151,  151,  151,  163,
      163,  163,  163,  163,  614,  615,  615,   69,   82,   82,
      110,  122,  122,  151,  163,  163,  614,  615,   69,   82,

      110,  122,  151,  163,  614,  615,   69,   82,  110,  122,
      151,  163,    0,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613
    } ;

static const flex_int16_t yy_nxt[3051] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   10,   10,   21,   22,   23,   24,   10,   25,   26,
       26,   27,   28,   29,   30,   26,   26,   31,   32,   33,
       34,   35,   26,   26,   36,   26,   37,   10,   38,   38,
       39,   38,   40,   41,   38,   38,   42,   43,   44,   45,
       46,   38,   38,   47,   38,   38,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   52,   52,   63,   64,   65,   66,   52,   67,   68,
       68,   69,   70,   71,   72,   68,   68,   73,   74,   75,
       76,   77,   68,   68,   78,   68,   79,   80,   81,   81,

       82,   81,   83,   84,   81,   81,   85,   86,   87,   88,
       89,   81,   81,   90,   81,   81,   91,   92,   93,   94,
       95,   11,   95,   96,   97,   98,   99,  100,  101,  102,
      103,   95,   95,  104,  105,  106,  107,   95,  108,  109,
      109,  110,  111,  112,  113,  109,  109,  114,  115,  116,
      117,  118,  109,  109,  119,  109,  120,   95,  121,  121,
      122,  121,  123,  124,  121,  121,  125,  126,  127,  128,
      129,  121,  121,  130,  121,  121,  131,  132,  133,  134,
      135,  136,  135,  137,  138,  139,  140,  141,  142,  143,
      144,  135,  135,  145,  146,  147,  148,  135,  149,  150,

      150,  151,  152,  153,  154,  150,  150,  155,  156,  157,
      158,  159,  150,  150,  160,  150,  161,  135,  162,  162,
      163,  162,  164,  165,  162,  162,  166,  167,  168,  169,
      170,  162,  162,  171,  162,  162,  172,  173,  174,  175,
      179,  183,  186,  188,  189,  191,  193,  187,  180,  190,
      184,  195,  192,  194,  196,  197,  198,  199,  200,  213,
      183,  186,  188,  189,  191,  193,  187,  201,  190,  184,
      195,  192,  194,  196,  197,  198,  202,  200,  213,  204,
      206,  203,  214,  209,  211,  207,  201,  205,  215,  220,
      210,  212,  217,  349,  216,  202,  350,  221,  204,  206,

      203,  214,  209,  211,  207,  182,  205,  215,  208,  210,
      212,  217,  349,  216,  218,  350,  357,  218,  218,  218,
      218,  218,  218,  218,  218,  223,  223,  218,  218,  218,
      218,  218,  218,  226,  223,  227,  357,  352,  223,  223,
      228,  587,  223,  232,  223,  223,  229,  223,  223,  238,
      233,  223,  268,  223,  227,  310,  352,  223,  223,  228,
      269,  223,  232,  311,  550,  229,  223,  223,  238,  233,
      223,  218,  218,  218,  218,  556,  353,  218,  218,  218,
      218,  218,  218,  218,  218,  550,  477,  218,  218,  218,
      218,  218,  218,  224,  223,  353,  223,  354,  355,  230,

      234,  223,  225,  223,  231,  223,  236,  235,  463,  368,
      223,  351,  224,  223,  312,  223,  354,  355,  230,  234,
      223,  225,  223,  231,  223,  236,  235,  223,  223,  223,
      241,  218,  218,  218,  247,  239,  223,  223,  237,  356,
      242,  358,  252,  250,  359,  360,  223,  223,  251,  309,
      253,  247,  361,  247,  239,  223,  223,  237,  356,  362,
      358,  252,  250,  359,  360,  363,  271,  251,  243,  253,
      247,  361,  244,  308,  274,  271,  364,  245,  362,  270,
      267,  176,  246,  218,  363,  271,  218,  218,  218,  218,
      218,  218,  218,  218,  271,  364,  218,  218,  218,  218,

      218,  218,  247,  365,  247,  247,  366,  254,  257,  247,
      261,  247,  255,  247,  247,  258,  222,  219,  247,  367,
      262,  247,  365,  247,  247,  366,  254,  257,  247,  261,
      247,  255,  247,  247,  258,  256,  313,  247,  367,  262,
      218,  218,  218,  218,  316,  313,  218,  218,  218,  218,
      218,  218,  218,  218,  185,  313,  218,  218,  218,  218,
      218,  218,  248,  247,  313,  369,  247,  259,  181,  247,
      178,  249,  247,  263,  260,  247,  265,  370,  247,  264,
      271,  248,  247,  177,  369,  247,  259,  286,  247,  271,
      249,  247,  263,  260,  247,  265,  370,  247,  264,  271,

      218,  218,  218,  266,  371,  266,  286,  266,  271,  266,
      266,  266,  266,  266,  271,  176,  266,  266,  266,  266,
      266,  266,  271,  275,  371,  372,  373,  271,  276,  271,
      277,  271,  278,  271,  284,  374,  271,  279,  271,  375,
      266,  271,  275,  613,  372,  373,  271,  276,  271,  277,
      271,  278,  613,  284,  374,  271,  279,  271,  375,  613,
      266,  266,  266,  266,  613,  266,  376,  266,  613,  266,
      266,  266,  266,  266,  613,  613,  266,  266,  266,  266,
      266,  266,  272,  271,  271,  376,  613,  280,  282,  613,
      271,  273,  271,  271,  281,  283,  293,  287,  613,  271,

      266,  272,  271,  271,  294,  288,  280,  282,  271,  271,
      273,  271,  271,  281,  283,  293,  287,  271,  271,  285,
      266,  266,  266,  294,  288,  461,  613,  271,  613,  613,
      613,  613,  462,  613,  613,  613,  271,  613,  285,  266,
      613,  266,  464,  266,  461,  266,  266,  266,  266,  266,
      288,  462,  266,  266,  266,  266,  266,  266,  288,  291,
      465,  464,  288,  295,  292,  288,  298,  288,  296,  288,
      302,  288,  613,  299,  288,  466,  266,  288,  291,  465,
      613,  288,  295,  292,  288,  298,  288,  296,  613,  302,
      288,  297,  299,  288,  466,  613,  266,  266,  266,  266,

      613,  266,  467,  266,  613,  266,  266,  266,  266,  266,
      613,  613,  266,  266,  266,  266,  266,  266,  289,  288,
      288,  467,  468,  300,  469,  288,  470,  290,  288,  288,
      301,  303,  306,  613,  288,  613,  266,  289,  288,  288,
      613,  468,  300,  469,  288,  470,  290,  288,  288,  301,
      303,  306,  288,  288,  313,  313,  266,  266,  266,  304,
      326,  288,  319,  313,  313,  305,  613,  471,  613,  613,
      613,  288,  613,  313,  313,  613,  613,  613,  304,  326,
      288,  319,  313,  313,  305,  307,  471,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  313,  613,  307,  307,

      307,  307,  307,  307,  313,  317,  472,  313,  313,  320,
      318,  322,  324,  313,  321,  313,  313,  313,  323,  325,
      473,  474,  307,  313,  317,  472,  313,  313,  320,  318,
      322,  324,  313,  321,  613,  313,  313,  323,  325,  473,
      474,  613,  307,  307,  307,  307,  613,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  313,  613,  307,  307,
      307,  307,  307,  307,  314,  313,  475,  327,  476,  313,
      313,  478,  335,  315,  479,  313,  328,  329,  313,  313,
      336,  330,  307,  314,  313,  475,  327,  476,  313,  313,
      478,  335,  315,  479,  613,  328,  329,  313,  313,  336,

      330,  613,  307,  307,  307,  307,  613,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  330,  613,  307,  307,
      307,  307,  307,  307,  330,  333,  480,  481,  330,  337,
      334,  330,  340,  330,  338,  330,  344,  330,  613,  341,
      330,  482,  307,  330,  333,  480,  481,  330,  337,  334,
      330,  340,  330,  338,  613,  344,  330,  339,  341,  330,
      482,  613,  307,  307,  307,  307,  613,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  613,  613,  307,  307,
      307,  307,  307,  307,  331,  330,  330,  549,  551,  342,
      552,  330,  223,  332,  330,  330,  343,  345,  348,  613,

      330,  223,  307,  331,  330,  330,  549,  551,  342,  552,
      330,  223,  332,  330,  330,  343,  345,  348,  330,  330,
      223,  223,  307,  307,  307,  346,  613,  330,  613,  378,
      223,  347,  613,  223,  381,  377,  223,  330,  223,  379,
      223,  613,  223,  223,  346,  223,  330,  223,  378,  223,
      347,  223,  223,  381,  377,  223,  223,  223,  613,  613,
      223,  223,  223,  223,  223,  380,  223,  223,  223,  553,
      223,  613,  223,  613,  382,  223,  223,  223,  383,  223,
      554,  223,  223,  555,  380,  385,  223,  223,  553,  223,
      223,  223,  384,  382,  223,  223,  223,  383,  223,  554,

      223,  223,  555,  223,  386,  385,  613,  613,  223,  223,
      223,  384,  387,  223,  613,  223,  247,  223,  223,  388,
      223,  391,  223,  386,  223,  247,  389,  223,  613,  223,
      247,  387,  393,  247,  223,  247,  613,  223,  388,  247,
      391,  247,  247,  223,  247,  389,  223,  390,  247,  247,
      247,  393,  247,  392,  247,  247,  613,  613,  247,  394,
      247,  247,  247,  247,  247,  613,  390,  247,  247,  247,
      557,  247,  392,  247,  247,  395,  247,  247,  394,  613,
      613,  247,  247,  247,  247,  247,  613,  247,  247,  557,
      247,  397,  613,  247,  395,  247,  247,  247,  396,  398,

      247,  399,  613,  247,  247,  247,  585,  247,  613,  247,
      397,  247,  247,  613,  247,  400,  247,  586,  398,  247,
      247,  399,  401,  247,  247,  585,  613,  402,  247,  247,
      247,  271,  247,  247,  400,  247,  586,  613,  247,  247,
      271,  401,  247,  404,  247,  403,  402,  271,  247,  406,
      271,  247,  613,  597,  247,  613,  271,  247,  271,  271,
      409,  405,  404,  247,  403,  271,  271,  271,  406,  271,
      613,  407,  597,  271,  271,  271,  271,  271,  271,  409,
      405,  408,  271,  613,  271,  598,  271,  271,  271,  271,
      271,  613,  271,  271,  613,  271,  410,  271,  271,  271,

      408,  271,  271,  271,  598,  411,  271,  271,  271,  271,
      271,  271,  271,  412,  605,  410,  271,  271,  271,  271,
      413,  271,  271,  613,  411,  414,  271,  288,  271,  271,
      271,  271,  412,  605,  271,  271,  288,  271,  271,  415,
      413,  271,  417,  271,  414,  416,  288,  271,  419,  613,
      271,  606,  613,  271,  288,  288,  271,  288,  415,  613,
      271,  417,  271,  288,  416,  288,  421,  419,  418,  271,
      606,  288,  288,  288,  288,  288,  288,  288,  613,  420,
      422,  288,  288,  288,  288,  421,  288,  418,  288,  613,
      288,  288,  288,  288,  288,  423,  288,  288,  420,  422,

      288,  613,  288,  288,  288,  288,  613,  288,  288,  613,
      613,  288,  288,  288,  423,  426,  288,  288,  425,  424,
      288,  288,  288,  288,  613,  427,  613,  288,  613,  288,
      288,  288,  288,  288,  426,  428,  288,  425,  313,  288,
      288,  613,  288,  613,  429,  427,  288,  313,  288,  288,
      430,  288,  288,  613,  428,  288,  613,  313,  613,  434,
      288,  288,  313,  429,  288,  288,  313,  431,  313,  430,
      288,  313,  432,  288,  288,  613,  433,  613,  434,  288,
      437,  313,  613,  288,  313,  613,  431,  313,  313,  313,
      313,  432,  288,  313,  435,  433,  313,  313,  436,  437,

      313,  613,  613,  313,  313,  313,  613,  313,  313,  313,
      613,  438,  313,  313,  613,  313,  313,  436,  313,  313,
      313,  613,  613,  313,  313,  313,  313,  313,  313,  313,
      438,  440,  313,  439,  313,  313,  613,  313,  313,  313,
      313,  442,  441,  613,  313,  313,  313,  313,  313,  313,
      440,  443,  439,  313,  313,  613,  313,  313,  613,  313,
      442,  613,  441,  313,  445,  313,  313,  444,  313,  330,
      443,  330,  313,  613,  613,  313,  613,  613,  330,  613,
      330,  613,  313,  445,  313,  446,  444,  447,  330,  330,
      330,  313,  449,  330,  613,  613,  330,  330,  330,  330,

      330,  330,  450,  448,  446,  330,  447,  613,  330,  330,
      613,  449,  330,  613,  330,  330,  330,  330,  330,  330,
      330,  450,  448,  451,  330,  330,  613,  330,  330,  330,
      330,  613,  613,  330,  330,  330,  613,  330,  330,  330,
      454,  330,  451,  330,  330,  453,  330,  613,  330,  330,
      330,  455,  613,  330,  452,  613,  456,  330,  330,  454,
      330,  330,  330,  330,  453,  613,  613,  613,  613,  330,
      330,  455,  330,  613,  457,  456,  330,  330,  613,  330,
      330,  458,  330,  613,  613,  330,  330,  460,  330,  330,
      223,  330,  459,  457,  483,  330,  330,  613,  330,  223,

      458,  223,  613,  613,  330,  330,  460,  330,  223,  223,
      223,  459,  223,  483,  487,  484,  485,  223,  223,  223,
      223,  223,  613,  486,  613,  613,  223,  223,  223,  223,
      488,  223,  223,  487,  484,  223,  223,  223,  223,  223,
      223,  223,  486,  223,  223,  223,  223,  223,  223,  488,
      613,  223,  223,  490,  223,  489,  223,  223,  223,  223,
      223,  247,  223,  223,  613,  223,  492,  223,  223,  491,
      247,  223,  490,  247,  489,  494,  223,  493,  223,  613,
      247,  613,  247,  613,  613,  492,  247,  223,  491,  247,
      495,  247,  247,  496,  494,  247,  493,  247,  247,  247,

      247,  247,  498,  613,  247,  247,  247,  247,  247,  495,
      247,  497,  496,  247,  247,  613,  247,  247,  247,  247,
      613,  498,  247,  247,  247,  247,  247,  247,  247,  499,
      497,  247,  247,  247,  500,  247,  247,  247,  613,  247,
      613,  247,  613,  247,  501,  247,  502,  247,  504,  613,
      247,  613,  247,  500,  247,  247,  247,  247,  247,  613,
      271,  503,  271,  501,  247,  502,  247,  504,  271,  271,
      507,  271,  505,  613,  506,  613,  247,  271,  613,  271,
      503,  271,  613,  271,  613,  247,  613,  271,  271,  613,
      271,  505,  271,  506,  271,  271,  271,  509,  508,  271,

      271,  271,  271,  271,  271,  510,  271,  613,  271,  271,
      271,  271,  511,  271,  271,  271,  509,  508,  271,  271,
      271,  271,  271,  271,  510,  271,  271,  271,  271,  271,
      512,  511,  271,  288,  271,  271,  513,  515,  613,  288,
      271,  514,  288,  613,  613,  271,  613,  613,  288,  512,
      613,  271,  288,  516,  271,  513,  515,  613,  288,  288,
      514,  288,  288,  517,  518,  288,  288,  288,  288,  613,
      520,  288,  516,  613,  288,  288,  613,  288,  288,  519,
      613,  288,  517,  518,  288,  288,  288,  288,  613,  520,
      288,  288,  288,  288,  288,  613,  288,  288,  519,  288,

      288,  288,  613,  288,  522,  288,  288,  521,  288,  613,
      288,  288,  523,  613,  613,  613,  288,  288,  288,  288,
      288,  525,  288,  522,  288,  288,  288,  288,  288,  613,
      613,  523,  313,  288,  524,  313,  288,  526,  613,  527,
      525,  313,  613,  288,  313,  288,  528,  288,  613,  613,
      613,  313,  288,  524,  313,  613,  526,  313,  527,  313,
      313,  530,  313,  313,  531,  528,  313,  529,  313,  613,
      313,  313,  613,  313,  532,  313,  313,  313,  313,  313,
      530,  313,  313,  531,  313,  313,  313,  313,  313,  313,
      313,  613,  313,  532,  313,  313,  313,  313,  313,  313,

      533,  313,  313,  313,  534,  313,  330,  313,  313,  535,
      537,  536,  613,  613,  313,  330,  313,  330,  313,  533,
      613,  313,  613,  534,  613,  330,  330,  313,  535,  537,
      536,  538,  330,  330,  330,  330,  330,  539,  330,  542,
      540,  330,  330,  613,  330,  330,  541,  330,  613,  613,
      538,  330,  330,  330,  330,  613,  539,  330,  542,  540,
      330,  330,  330,  330,  613,  541,  330,  330,  330,  330,
      330,  613,  330,  330,  613,  330,  330,  330,  330,  330,
      544,  330,  545,  543,  330,  546,  330,  330,  330,  330,
      613,  330,  330,  613,  330,  330,  330,  330,  330,  544,

      548,  545,  330,  330,  546,  223,  547,  613,  223,  223,
      330,  330,  613,  613,  223,  613,  613,  223,  223,  548,
      223,  330,  558,  223,  223,  547,  613,  223,  223,  223,
      330,  223,  223,  223,  223,  559,  223,  223,  223,  223,
      223,  558,  223,  223,  560,  223,  247,  223,  223,  613,
      223,  223,  223,  223,  223,  247,  561,  223,  247,  223,
      247,  223,  223,  560,  223,  247,  223,  247,  613,  247,
      613,  223,  562,  223,  247,  561,  247,  247,  247,  247,
      223,  247,  563,  247,  247,  247,  247,  247,  247,  247,
      247,  562,  247,  247,  564,  247,  247,  247,  247,  613,

      247,  563,  247,  247,  247,  247,  247,  247,  247,  247,
      565,  247,  247,  564,  247,  247,  247,  247,  566,  271,
      271,  271,  271,  247,  247,  613,  247,  613,  271,  271,
      271,  271,  613,  247,  567,  247,  568,  566,  271,  271,
      271,  271,  247,  271,  613,  271,  271,  271,  271,  271,
      271,  271,  271,  567,  271,  271,  613,  271,  569,  271,
      271,  613,  271,  570,  271,  271,  271,  613,  271,  613,
      271,  271,  288,  271,  271,  288,  271,  569,  271,  271,
      613,  288,  570,  288,  288,  271,  288,  271,  613,  571,
      288,  288,  288,  613,  288,  288,  613,  288,  613,  288,

      288,  572,  288,  288,  288,  288,  288,  613,  571,  288,
      288,  288,  288,  288,  288,  288,  288,  573,  288,  288,
      572,  288,  613,  288,  288,  288,  288,  613,  613,  288,
      313,  288,  288,  613,  288,  288,  573,  574,  288,  313,
      288,  313,  288,  288,  313,  288,  575,  313,  313,  313,
      313,  288,  613,  313,  288,  576,  313,  313,  313,  577,
      313,  288,  313,  313,  313,  575,  313,  313,  613,  313,
      288,  313,  313,  313,  576,  313,  313,  578,  313,  313,
      313,  313,  330,  313,  579,  330,  330,  313,  313,  313,
      313,  330,  313,  330,  330,  330,  578,  313,  313,  313,

      580,  330,  330,  579,  330,  330,  313,  313,  313,  330,
      330,  330,  330,  330,  330,  581,  330,  330,  330,  580,
      330,  330,  582,  330,  613,  330,  330,  613,  330,  330,
      330,  330,  330,  613,  581,  330,  330,  330,  330,  330,
      330,  582,  330,  583,  330,  330,  223,  223,  330,  330,
      330,  330,  223,  584,  223,  223,  223,  330,  330,  330,
      588,  223,  559,  223,  613,  223,  223,  247,  330,  247,
      613,  223,  584,  223,  223,  223,  247,  330,  247,  588,
      223,  247,  223,  247,  247,  271,  247,  613,  247,  589,
      247,  613,  247,  247,  271,  247,  613,  247,  271,  613,

      247,  271,  247,  247,  271,  590,  591,  271,  589,  247,
      271,  247,  247,  271,  271,  288,  568,  271,  288,  288,
      271,  613,  288,  271,  288,  591,  271,  288,  288,  271,
      592,  288,  613,  271,  288,  288,  313,  288,  288,  313,
      613,  288,  271,  288,  288,  313,  288,  288,  313,  592,
      288,  313,  613,  313,  288,  313,  330,  593,  313,  330,
      313,  594,  313,  288,  313,  330,  577,  313,  330,  613,
      313,  613,  313,  613,  330,  330,  330,  330,  330,  313,
      594,  313,  595,  330,  330,  330,  330,  330,  223,  613,
      247,  247,  613,  330,  613,  330,  330,  223,  596,  247,

      247,  595,  330,  599,  330,  330,  600,  223,  271,  247,
      247,  288,  288,  613,  613,  613,  223,  271,  247,  247,
      288,  288,  599,  601,  613,  600,  602,  271,  313,  330,
      288,  288,  330,  613,  613,  613,  271,  313,  330,  288,
      288,  330,  601,  603,  604,  602,  613,  313,  330,  613,
      223,  330,  247,  613,  613,  613,  313,  330,  271,  223,
      330,  247,  603,  604,  607,  288,  608,  271,  613,  223,
      613,  247,  609,  313,  288,  613,  613,  271,  223,  610,
      247,  330,  313,  607,  288,  608,  271,  611,  223,  613,
      330,  609,  313,  288,  247,  612,  271,  223,  610,  288,

      330,  313,  313,  247,  613,  271,  611,  223,  288,  330,
      330,  313,  613,  247,  612,  271,  223,  613,  288,  330,
      613,  313,  247,  613,  271,  613,  613,  288,  613,  330,
      313,  613,  613,  613,  613,  613,  613,  613,  330,  218,
      613,  613,  218,  218,  223,  613,  613,  223,  223,  240,
      240,  240,  240,  240,  247,  613,  613,  247,  247,  266,
      613,  266,  613,  266,  271,  613,  271,  613,  271,  288,
      613,  288,  613,  288,  307,  613,  307,  307,  307,  313,
      613,  313,  313,  313,  330,  613,  330,  330,  330,    9,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613
    } ;

static const flex_int16_t yy_chk[3051] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       23,   27,   29,   30,   31,   32,   33,   29,   23,   31,
       27,   34,   32,   33,   35,   36,   37,  615,   39,   45,
       27,   29,   30,   31,   32,   33,   29,   39,   31,   27,
       34,   32,   33,   35,   36,   37,   40,   39,   45,   41,
       42,   40,   46,   43,   44,   42,   39,   41,   47,   65,
       43,   44,   48,  183,   47,   40,  184,   65,   41,   42,

       40,   46,   43,   44,   42,  614,   41,   47,   42,   43,
       44,   48,  183,   47,   68,  184,  193,   68,   68,   68,
       68,   68,   68,   68,   68,   70,   71,   68,   68,   68,
       68,   68,   68,   70,   70,   71,  193,  186,   72,   74,
       71,  556,   78,   74,   70,   71,   72,   72,   74,   78,
       74,   78,  106,   70,   71,  147,  186,   72,   74,   71,
      106,   78,   74,  147,  550,   72,   72,   74,   78,   74,
       78,   68,   68,   68,   69,  477,  187,   69,   69,   69,
       69,   69,   69,   69,   69,  463,  368,   69,   69,   69,
       69,   69,   69,   69,   73,  187,   75,  190,  191,   73,

       75,   76,   69,   73,   73,   75,   76,   75,  351,  208,
       76,  185,   69,   73,  148,   75,  190,  191,   73,   75,
       76,   69,   73,   73,   75,   76,   75,   77,   79,   76,
       80,   69,   69,   69,   83,   79,   77,   79,   77,  192,
       80,  194,   84,   83,  196,  197,   77,   79,   83,  139,
       84,   84,  198,   83,   79,   77,   79,   77,  192,  200,
      194,   84,   83,  196,  197,  201,  111,   83,   80,   84,
       84,  198,   80,  137,  111,  111,  202,   80,  200,  107,
       98,   96,   80,   81,  201,  111,   81,   81,   81,   81,
       81,   81,   81,   81,  111,  202,   81,   81,   81,   81,

       81,   81,   85,  203,   86,   88,  204,   85,   86,   89,
       88,   85,   85,   86,   88,   86,   66,   57,   89,  207,
       89,   85,  203,   86,   88,  204,   85,   86,   89,   88,
       85,   85,   86,   88,   86,   85,  152,   89,  207,   89,
       81,   81,   81,   82,  152,  152,   82,   82,   82,   82,
       82,   82,   82,   82,   28,  152,   82,   82,   82,   82,
       82,   82,   82,   87,  152,  209,   90,   87,   24,   91,
       18,   82,   87,   90,   87,   90,   91,  210,   91,   90,
      119,   82,   87,   15,  209,   90,   87,  119,   91,  119,
       82,   87,   90,   87,   90,   91,  210,   91,   90,  119,

       82,   82,   82,  109,  211,  109,  119,  109,  119,  109,
      109,  109,  109,  109,  112,   13,  109,  109,  109,  109,
      109,  109,  113,  112,  211,  212,  214,  114,  112,  117,
      113,  113,  114,  112,  117,  215,  114,  114,  117,  216,
      109,  113,  112,    9,  212,  214,  114,  112,  117,  113,
      113,  114,    0,  117,  215,  114,  114,  117,  216,    0,
      109,  109,  109,  110,    0,  110,  217,  110,    0,  110,
      110,  110,  110,  110,    0,    0,  110,  110,  110,  110,
      110,  110,  110,  115,  116,  217,    0,  115,  116,    0,
      120,  110,  115,  116,  115,  116,  124,  120,    0,  120,

      110,  110,  115,  116,  124,  124,  115,  116,  118,  120,
      110,  115,  116,  115,  116,  124,  120,  118,  120,  118,
      110,  110,  110,  124,  124,  349,    0,  118,    0,    0,
        0,    0,  350,    0,    0,    0,  118,    0,  118,  121,
        0,  121,  352,  121,  349,  121,  121,  121,  121,  121,
      123,  350,  121,  121,  121,  121,  121,  121,  125,  123,
      353,  352,  126,  125,  123,  128,  126,  125,  125,  123,
      128,  126,    0,  126,  128,  354,  121,  125,  123,  353,
        0,  126,  125,  123,  128,  126,  125,  125,    0,  128,
      126,  125,  126,  128,  354,    0,  121,  121,  121,  122,

        0,  122,  356,  122,    0,  122,  122,  122,  122,  122,
        0,    0,  122,  122,  122,  122,  122,  122,  122,  127,
      129,  356,  359,  127,  360,  131,  361,  122,  127,  129,
      127,  129,  131,    0,  131,    0,  122,  122,  127,  129,
        0,  359,  127,  360,  131,  361,  122,  127,  129,  127,
      129,  131,  130,  131,  154,  158,  122,  122,  122,  130,
      158,  130,  154,  154,  158,  130,    0,  362,    0,    0,
        0,  130,    0,  154,  158,    0,    0,    0,  130,  158,
      130,  154,  154,  158,  130,  150,  362,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  153,    0,  150,  150,

      150,  150,  150,  150,  155,  153,  363,  156,  157,  155,
      153,  156,  157,  155,  155,  153,  156,  157,  156,  157,
      364,  365,  150,  155,  153,  363,  156,  157,  155,  153,
      156,  157,  155,  155,    0,  156,  157,  156,  157,  364,
      365,    0,  150,  150,  150,  151,    0,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  159,    0,  151,  151,
      151,  151,  151,  151,  151,  159,  366,  159,  367,  160,
      161,  370,  165,  151,  373,  159,  160,  161,  160,  161,
      165,  165,  151,  151,  159,  366,  159,  367,  160,  161,
      370,  165,  151,  373,    0,  160,  161,  160,  161,  165,

      165,    0,  151,  151,  151,  162,    0,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  164,    0,  162,  162,
      162,  162,  162,  162,  166,  164,  374,  375,  167,  166,
      164,  169,  167,  166,  166,  164,  169,  167,    0,  167,
      169,  376,  162,  166,  164,  374,  375,  167,  166,  164,
      169,  167,  166,  166,    0,  169,  167,  166,  167,  169,
      376,    0,  162,  162,  162,  163,    0,  163,  163,  163,
      163,  163,  163,  163,  163,  163,    0,    0,  163,  163,
      163,  163,  163,  163,  163,  168,  170,  462,  466,  168,
      470,  172,  223,  163,  168,  170,  168,  170,  172,    0,

      172,  223,  163,  163,  168,  170,  462,  466,  168,  470,
      172,  223,  163,  168,  170,  168,  170,  172,  171,  172,
      223,  224,  163,  163,  163,  171,    0,  171,    0,  225,
      224,  171,    0,  226,  228,  224,  229,  171,  225,  226,
      224,    0,  226,  228,  171,  229,  171,  230,  225,  224,
      171,  227,  226,  228,  224,  229,  230,  225,    0,    0,
      227,  226,  228,  232,  229,  227,  230,  231,  234,  472,
      227,    0,  232,    0,  231,  230,  231,  234,  232,  227,
      475,  233,  232,  476,  227,  234,  231,  234,  472,  235,
      233,  232,  233,  231,  236,  231,  234,  232,  235,  475,

      233,  237,  476,  236,  235,  234,    0,    0,  235,  233,
      237,  233,  237,  236,    0,  238,  247,  235,  239,  238,
      237,  249,  236,  235,  238,  247,  239,  239,    0,  237,
      249,  237,  251,  248,  238,  247,    0,  239,  238,  250,
      249,  251,  248,  238,  247,  239,  239,  248,  250,  249,
      252,  251,  248,  250,  253,  254,    0,    0,  250,  252,
      251,  248,  256,  253,  254,    0,  248,  250,  255,  252,
      482,  256,  250,  253,  254,  255,  257,  255,  252,    0,
        0,  256,  253,  254,  259,  257,    0,  255,  258,  482,
      256,  257,    0,  259,  255,  257,  255,  258,  256,  258,

      260,  259,    0,  259,  257,  261,  551,  258,    0,  260,
      257,  262,  259,    0,  261,  260,  258,  555,  258,  260,
      262,  259,  262,  263,  261,  551,    0,  263,  260,  264,
      262,  271,  263,  261,  260,  265,  555,    0,  264,  262,
      271,  262,  263,  265,  265,  264,  263,  272,  264,  273,
      271,  263,    0,  585,  265,    0,  272,  264,  273,  271,
      276,  272,  265,  265,  264,  274,  272,  275,  273,  276,
        0,  274,  585,  277,  274,  272,  275,  273,  278,  276,
      272,  275,  277,    0,  274,  586,  275,  278,  276,  279,
      280,    0,  277,  274,    0,  275,  279,  278,  279,  280,

      275,  277,  281,  282,  586,  280,  278,  284,  279,  280,
      283,  281,  282,  281,  597,  279,  284,  279,  280,  283,
      282,  281,  282,    0,  280,  283,  284,  288,  285,  283,
      281,  282,  281,  597,  287,  284,  288,  285,  283,  285,
      282,  286,  287,  287,  283,  286,  288,  285,  290,    0,
      286,  598,    0,  287,  289,  288,  285,  290,  285,    0,
      286,  287,  287,  289,  286,  291,  292,  290,  289,  286,
      598,  293,  294,  289,  291,  292,  290,  295,    0,  291,
      293,  294,  289,  297,  291,  292,  295,  289,  296,    0,
      293,  294,  297,  291,  292,  296,  295,  296,  291,  293,

      294,    0,  297,  298,  299,  295,    0,  296,  300,    0,
        0,  297,  298,  299,  296,  299,  296,  300,  298,  297,
      301,  302,  298,  299,    0,  300,    0,  300,    0,  301,
      302,  298,  299,  303,  299,  301,  300,  298,  313,  301,
      302,    0,  303,    0,  303,  300,  304,  313,  301,  302,
      304,  305,  303,    0,  301,  304,    0,  313,    0,  315,
      305,  303,  314,  303,  306,  304,  313,  305,  315,  304,
      305,  314,  306,  306,  304,    0,  314,    0,  315,  305,
      318,  314,    0,  306,  317,    0,  305,  315,  316,  318,
      314,  306,  306,  317,  316,  314,  319,  316,  317,  318,

      320,    0,    0,  317,  321,  319,    0,  316,  318,  320,
        0,  321,  317,  321,    0,  319,  316,  317,  322,  320,
      323,    0,    0,  321,  319,  324,  325,  322,  320,  323,
      321,  323,  321,  322,  324,  325,    0,  322,  326,  323,
      327,  325,  324,    0,  324,  325,  322,  326,  323,  327,
      323,  327,  322,  324,  325,    0,  329,  326,    0,  327,
      325,    0,  324,  328,  329,  329,  326,  328,  327,  330,
      327,  331,  328,    0,    0,  329,    0,    0,  330,    0,
      331,    0,  328,  329,  329,  331,  328,  332,  330,  333,
      331,  328,  334,  335,    0,    0,  332,  330,  333,  331,

      336,  334,  335,  333,  331,  337,  332,    0,  333,  336,
        0,  334,  335,    0,  337,  332,  338,  333,  339,  336,
      334,  335,  333,  338,  337,  338,    0,  339,  336,  341,
      340,    0,    0,  337,  342,  338,    0,  339,  341,  340,
      341,  343,  338,  342,  338,  340,  339,    0,  341,  340,
      343,  342,    0,  342,  339,    0,  343,  341,  340,  341,
      343,  344,  342,  345,  340,    0,    0,    0,    0,  343,
      344,  342,  345,    0,  345,  343,  347,  346,    0,  348,
      344,  346,  345,    0,    0,  347,  346,  348,  348,  344,
      377,  345,  347,  345,  377,  347,  346,    0,  348,  377,

      346,  378,    0,    0,  347,  346,  348,  348,  379,  377,
      378,  347,  381,  377,  381,  378,  379,  379,  377,  380,
      378,  381,    0,  380,    0,    0,  382,  379,  380,  378,
      382,  381,  383,  381,  378,  382,  379,  385,  380,  386,
      381,  383,  380,  384,  387,  382,  385,  380,  386,  382,
        0,  383,  384,  387,  382,  384,  385,  389,  386,  388,
      383,  391,  384,  387,    0,  385,  389,  386,  388,  388,
      391,  384,  387,  390,  384,  391,  389,  390,  388,    0,
      391,    0,  390,    0,    0,  389,  392,  388,  388,  391,
      392,  393,  390,  393,  391,  392,  390,  394,  395,  396,

      393,  390,  395,    0,  397,  392,  394,  395,  396,  392,
      393,  394,  393,  397,  392,    0,  394,  395,  396,  393,
        0,  395,  398,  397,  399,  394,  395,  396,  400,  396,
      394,  398,  397,  399,  398,  401,  402,  400,    0,  404,
        0,  398,    0,  399,  401,  402,  402,  400,  404,    0,
      398,    0,  399,  398,  401,  402,  400,  403,  404,    0,
      406,  403,  407,  401,  402,  402,  403,  404,  405,  406,
      407,  407,  405,    0,  406,    0,  403,  405,    0,  406,
      403,  407,    0,  411,    0,  403,    0,  405,  406,    0,
      407,  405,  411,  406,  408,  409,  405,  409,  408,  413,

      412,  410,  411,  408,  409,  410,  414,    0,  413,  412,
      410,  411,  412,  408,  409,  414,  409,  408,  413,  412,
      410,  415,  408,  409,  410,  414,  416,  413,  412,  410,
      415,  412,  417,  418,  414,  416,  416,  418,    0,  419,
      415,  417,  418,    0,    0,  416,    0,    0,  419,  415,
        0,  417,  418,  419,  416,  416,  418,    0,  419,  420,
      417,  418,  421,  420,  421,  422,  423,  419,  420,    0,
      423,  421,  419,    0,  422,  423,    0,  424,  420,  422,
        0,  421,  420,  421,  422,  423,  424,  420,    0,  423,
      421,  425,  426,  422,  423,    0,  424,  427,  422,  428,

      425,  426,    0,  429,  426,  424,  427,  424,  428,    0,
      425,  426,  429,    0,    0,    0,  427,  431,  428,  425,
      426,  431,  429,  426,  430,  427,  431,  428,  432,    0,
        0,  429,  434,  430,  430,  433,  431,  432,    0,  433,
      431,  434,    0,  430,  433,  431,  434,  432,    0,    0,
        0,  434,  430,  430,  433,    0,  432,  436,  433,  435,
      434,  436,  437,  433,  437,  434,  436,  435,  435,    0,
      438,  437,    0,  439,  438,  441,  436,  442,  435,  438,
      436,  437,  439,  437,  441,  436,  442,  435,  440,  438,
      437,    0,  439,  438,  441,  443,  442,  440,  438,  444,

      440,  439,  445,  441,  443,  442,  446,  440,  444,  444,
      446,  445,    0,    0,  443,  446,  440,  447,  444,  440,
        0,  445,    0,  443,    0,  446,  447,  444,  444,  446,
      445,  447,  450,  448,  446,  451,  447,  448,  449,  451,
      449,  450,  448,    0,  451,  447,  450,  449,    0,    0,
      447,  450,  448,  452,  451,    0,  448,  449,  451,  449,
      450,  448,  452,  451,    0,  450,  449,  453,  454,  455,
      456,    0,  452,  457,    0,  458,  453,  454,  455,  456,
      454,  452,  457,  452,  458,  458,  453,  454,  455,  456,
        0,  460,  457,    0,  458,  453,  454,  455,  456,  454,

      460,  457,  459,  458,  458,  483,  459,    0,  484,  486,
      460,  459,    0,    0,  483,    0,    0,  484,  486,  460,
      485,  459,  484,  487,  483,  459,    0,  484,  486,  485,
      459,  488,  487,  483,  489,  485,  484,  486,  490,  485,
      488,  484,  487,  489,  488,  491,  493,  490,  485,    0,
      488,  487,  492,  489,  491,  493,  492,  490,  494,  488,
      495,  492,  489,  488,  491,  493,  490,  494,    0,  495,
        0,  492,  494,  491,  493,  492,  496,  494,  497,  495,
      492,  498,  497,  499,  500,  496,  494,  497,  495,  501,
      498,  494,  499,  500,  498,  496,  502,  497,  501,    0,

      498,  497,  499,  500,  496,  502,  497,  503,  501,  498,
      499,  499,  500,  498,  504,  502,  503,  501,  504,  505,
      506,  507,  508,  504,  502,    0,  503,    0,  505,  506,
      507,  508,    0,  504,  506,  503,  507,  504,  505,  506,
      507,  508,  504,  509,    0,  510,  511,  505,  506,  507,
      508,  512,  509,  506,  510,  511,    0,  513,  510,  514,
      512,    0,  509,  514,  510,  511,  513,    0,  514,    0,
      512,  509,  515,  510,  511,  516,  513,  510,  514,  512,
        0,  515,  514,  517,  516,  513,  518,  514,    0,  516,
      522,  515,  517,    0,  516,  518,    0,  519,    0,  522,

      515,  519,  517,  516,  520,  518,  519,    0,  516,  522,
      521,  517,  523,  520,  518,  524,  519,  520,  522,  521,
      519,  523,    0,  520,  524,  519,  525,    0,    0,  521,
      527,  523,  520,    0,  524,  525,  520,  521,  521,  527,
      523,  528,  526,  524,  529,  525,  526,  530,  531,  527,
      528,  526,    0,  529,  525,  528,  530,  531,  527,  529,
      528,  526,  533,  529,  532,  526,  530,  531,    0,  528,
      526,  533,  529,  532,  528,  530,  531,  532,  534,  535,
      536,  533,  537,  532,  536,  539,  538,  534,  535,  536,
      533,  537,  532,  540,  539,  538,  532,  534,  535,  536,

      538,  537,  540,  536,  539,  538,  534,  535,  536,  542,
      537,  541,  540,  539,  538,  541,  543,  544,  542,  538,
      541,  540,  542,  545,    0,  543,  544,    0,  542,  546,
      541,  547,  545,    0,  541,  543,  544,  542,  546,  541,
      547,  542,  545,  543,  543,  544,  558,  559,  546,  548,
      547,  545,  560,  548,  561,  558,  559,  546,  548,  547,
      560,  560,  559,  561,    0,  558,  559,  562,  548,  563,
        0,  560,  548,  561,  558,  559,  562,  548,  563,  560,
      560,  564,  561,  565,  566,  567,  562,    0,  563,  564,
      564,    0,  565,  566,  567,  562,    0,  563,  569,    0,

      564,  568,  565,  566,  567,  565,  569,  569,  564,  564,
      568,  565,  566,  567,  570,  571,  568,  569,  572,  575,
      568,    0,  573,  570,  571,  569,  569,  572,  575,  568,
      573,  573,    0,  570,  571,  574,  576,  572,  575,  579,
        0,  573,  570,  571,  574,  576,  572,  575,  579,  573,
      573,  577,    0,  578,  574,  576,  580,  574,  579,  581,
      577,  578,  578,  574,  576,  580,  577,  579,  581,    0,
      577,    0,  578,    0,  582,  580,  583,  584,  581,  577,
      578,  578,  582,  582,  580,  583,  584,  581,  588,    0,
      590,  589,    0,  582,    0,  583,  584,  588,  583,  590,

      589,  582,  582,  588,  583,  584,  589,  588,  591,  590,
      589,  592,  593,    0,    0,    0,  588,  591,  590,  589,
      592,  593,  588,  591,    0,  589,  592,  591,  594,  595,
      592,  593,  596,    0,    0,    0,  591,  594,  595,  592,
      593,  596,  591,  594,  595,  592,    0,  594,  595,    0,
      599,  596,  600,    0,    0,    0,  594,  595,  601,  599,
      596,  600,  594,  595,  599,  602,  600,  601,    0,  599,
        0,  600,  601,  603,  602,    0,    0,  601,  599,  602,
      600,  604,  603,  599,  602,  600,  601,  603,  607,    0,
      604,  601,  603,  602,  608,  604,  609,  607,  602,  610,

      604,  603,  611,  608,    0,  609,  603,  607,  610,  604,
      612,  611,    0,  608,  604,  609,  607,    0,  610,  612,
        0,  611,  608,    0,  609,    0,    0,  610,    0,  612,
      611,    0,    0,    0,    0,    0,    0,    0,  612,  616,
        0,    0,  616,  616,  617,    0,    0,  617,  617,  618,
      618,  618,  618,  618,  619,    0,    0,  619,  619,  620,
        0,  620,    0,  620,  621,    0,  621,    0,  621,  622,
        0,  622,    0,  622,  623,    0,  623,  623,  623,  624,
        0,  624,  624,  624,  625,    0,  625,  625,  625,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[63] =
    {   0,
      128,  133,  140,  144,  147,  151,  155,  166,  174,  188,
      193,  247,  252,  265,  266,  267,  268,  270,  274,  278,
      284,  288,  292,  297,  301,  305,  309,  313,  318,  322,
      326,  330,  334,  339,  343,  348,  352,  356,  360,  364,
      370,  376,  381,  385,  388,  391,  393,  395,  397,  399,
      401,  403,  405,  407,  409,  411,  413,  415,  417,  419,
      421,  423
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 13 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>
#include <string>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex


/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

int comment_layer = 0;
/*
 *  Add Your own definitions here
 */
#define CheckStringLonger(buf, buf_ptr) (buf_ptr - buf) > MAX_STR_CONST ? 1 : 0;

/*
void set_error_msg(const char *msg) {
  yylex = ERROR;
  yylval.error_msg = msg;

}
*/
#line 1469 "cool-lex.cc"
/*
 * Define names for regular expressions here.
 */

/*
  # define YYTOKENTYPE
    Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  
   enum yytokentype {
     CLASS = 258,
     ELSE = 259,
     FI = 260,
     IF = 261,
     IN = 262,
     INHERITS = 263,
     LET = 264,
     LOOP = 265,
     POOL = 266,
     THEN = 267,
     WHILE = 268,
     CASE = 269,
     ESAC = 270,
     OF = 271,
     DARROW = 272,
     NEW = 273,
     ISVOID = 274,
     STR_CONST = 275,
     INT_CONST = 276,
     BOOL_CONST = 277,
     TYPEID = 278,
     OBJECTID = 279,
     ASSIGN = 280,
     NOT = 281,
     LE = 282,
     ERROR = 283,
     LET_STMT = 285
   };
*/
#line 1508 "cool-lex.cc"

#define INITIAL 0
#define STRING 1
#define COMMENT 2
#define INLINE_COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 119 "cool.flex"




#line 124 "cool.flex"
 /*
  *  Nested comments
  */

#line 1801 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 614 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2990 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 63 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 63 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 64 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 128 "cool.flex"
{
  comment_layer++;
  BEGIN COMMENT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 133 "cool.flex"
{
  comment_layer--;
  if(comment_layer == 0){
    BEGIN 0;
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 140 "cool.flex"
{

}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 144 "cool.flex"
{

}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 147 "cool.flex"
{
  BEGIN(INLINE_COMMENT);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 151 "cool.flex"
{

}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 155 "cool.flex"
{
  curr_lineno++;
  BEGIN 0;
}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 160 "cool.flex"
{
  yylval.error_msg = "EOF in comment";
  BEGIN 0;
  return ERROR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 166 "cool.flex"
{
  yylval.error_msg = "Unmatched *)";
  return ERROR;
}
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 9:
YY_RULE_SETUP
#line 174 "cool.flex"
{ return (DARROW); }
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 10:
YY_RULE_SETUP
#line 188 "cool.flex"
{
  BEGIN(STRING);
  yymore();
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 193 "cool.flex"
{ 
  std::string input(yytext, yyleng);
  input = input.substr(1, input.length()-2); 

  if(input.find_first_of('\0') != std::string::npos){
    yylval.error_msg = "String contains null character";
    BEGIN 0;
    return ERROR;
  }
  string_buf_ptr = string_buf;
  for(int i=0; i < input.length(); i++) {
    if(input[i] == '\\'){
      switch (input[i+1]){
        case 't':
          *string_buf_ptr++ = '\t';
          break;
        case 'b':
          *string_buf_ptr++ = '\b';
          break;

        case 'n':
          *string_buf_ptr++ = '\n';
          break;

        case 'f':
          *string_buf_ptr++ = '\f';
          break;

        default:
          *string_buf_ptr++ = input[i+1];
          break;
      }
      i++;

    } 
    else {
      *string_buf_ptr++ = input[i];
    }

  }

  if(string_buf_ptr - string_buf > MAX_STR_CONST){
    yylval.error_msg = "String constant too long";
    BEGIN 0;
    return ERROR;
  }

  yylval.symbol = stringtable.add_string(string_buf);
  BEGIN 0;
  return STR_CONST;

}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 247 "cool.flex"
{
  yylval.error_msg = "String contains null character";
  return ERROR;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 252 "cool.flex"
{
  yylval.error_msg = "error unterminated string constant";
  return ERROR;
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 258 "cool.flex"
{
  yylval.error_msg = "unterminated string";
  BEGIN 0;
  yyrestart(yyin);
  return ERROR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 265 "cool.flex"
{yymore();}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 266 "cool.flex"
{yymore();}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 267 "cool.flex"
{yymore();}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 268 "cool.flex"
{yymore();}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 270 "cool.flex"
{
  yymore();  
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 274 "cool.flex"
{
  yymore();
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 278 "cool.flex"
{
  curr_lineno++;
  yymore();
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 284 "cool.flex"
{
   return CLASS;
 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 288 "cool.flex"
{
  return ELSE;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 292 "cool.flex"
{
  yylval.boolean = 0;
  return BOOL_CONST;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 297 "cool.flex"
{
   return FI;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 301 "cool.flex"
{
  return IF;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 305 "cool.flex"
{
  return IN;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 309 "cool.flex"
{
  return INHERITS;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 313 "cool.flex"
{
  return ISVOID;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 318 "cool.flex"
{
  return LET;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 322 "cool.flex"
{
  return  LOOP;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 326 "cool.flex"
{
  return POOL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 330 "cool.flex"
{
  return THEN;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 334 "cool.flex"
{
  return WHILE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 339 "cool.flex"
{
  return CASE;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 343 "cool.flex"
{
  return ESAC;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 348 "cool.flex"
{
  return NEW;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 352 "cool.flex"
{
  return OF;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 356 "cool.flex"
{
  return NOT;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 360 "cool.flex"
{
  yylval.boolean = 1;
  return BOOL_CONST;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 364 "cool.flex"
{
  yylval.symbol = idtable.add_string(yytext);
  /*yylex = TYPEID;*/
  return TYPEID;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 370 "cool.flex"
{
  yylval.symbol = idtable.add_string(yytext);
  /*yylex = OBJECTID;*/
  return OBJECTID;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 376 "cool.flex"
{
  yylval.symbol = inttable.add_string(yytext);
  return INT_CONST;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 381 "cool.flex"
{
  curr_lineno++;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 385 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
/* LE */
case 45:
YY_RULE_SETUP
#line 388 "cool.flex"
{ return LE; }
	YY_BREAK
/* DARROW */
case 46:
YY_RULE_SETUP
#line 391 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 393 "cool.flex"
{ return int('+'); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 395 "cool.flex"
{ return int('-'); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 397 "cool.flex"
{ return int('*'); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 399 "cool.flex"
{ return int('/'); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 401 "cool.flex"
{ return int('<'); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 403 "cool.flex"
{ return int('='); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 405 "cool.flex"
{ return int('.'); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 407 "cool.flex"
{ return int(';'); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 409 "cool.flex"
{ return int('~'); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 411 "cool.flex"
{ return int('{'); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 413 "cool.flex"
{ return int('}'); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 415 "cool.flex"
{ return int('('); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 417 "cool.flex"
{ return int(')'); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 419 "cool.flex"
{ return int(':'); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 421 "cool.flex"
{ return int('@'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 423 "cool.flex"
{ return int(','); }
	YY_BREAK
/* =====
  * error
  * =====
  */
case 63:
YY_RULE_SETUP
#line 432 "cool.flex"
ECHO;
	YY_BREAK
#line 2384 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INLINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 614 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 614 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 613);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 432 "cool.flex"


